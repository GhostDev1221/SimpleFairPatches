---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/12/25 10:14
---
require "base.util.class"
require "process.BaseProcess"
require "settlement.PvpSettlement"

SiteProcess = class("SiteProcess", BaseProcess)

SiteProcess.chest = {}
SiteProcess.Status = {}
SiteProcess.Status.Init = 0
SiteProcess.Status.Waitting = 1
SiteProcess.Status.Select = 2
SiteProcess.Status.Prepare = 3
SiteProcess.Status.Running = 4
SiteProcess.Status.ExtraTime = 5
SiteProcess.Status.WaitRevenge = 6
SiteProcess.Status.WaitClose = 7
SiteProcess.curStatus = 0

SiteProcess.WaitTick = 0
SiteProcess.PrepareTick = 0
SiteProcess.ExtraTick = 0
SiteProcess.SelectTick = 0
SiteProcess.WaitRevengeTick = 0
SiteProcess.GameOverTick = 0

SiteProcess.CountDownTick = 0

function SiteProcess:ctor(site)
    self.id = site.id
    self.site = site
    self.curStatus = self.Status.Waitting
    self.chest = {}
end

function SiteProcess:onTick(ticks)
    self.curTick = ticks
    if self.curStatus == self.Status.Waitting then
        self:ifWaittingEnd()
    end

    if self.curStatus == self.Status.Select then
        self:ifSelectEnd()
    end

    if self.curStatus == self.Status.Prepare then
        self:ifPrepareEnd()
    end

    if self.curStatus == self.Status.Running then
        self:ifGameEnd()
    end

    if self.curStatus == self.Status.ExtraTime then
        self:ifExtraTimeEnd()
    end

    if self.curStatus == self.Status.WaitRevenge then
        self:ifRevenge()
    end

    if self.curStatus == self.Status.WaitClose then
        self:resetSite()
    end
end

function SiteProcess:ifWaittingEnd()
    --waitting --> prepare
    if self.site.playernum == 2 then
        self:waittingEnd()
    else
        if self.curTick % 5 == 0 then
            for i, v in pairs(self.site.players) do
                MsgSender.sendMsgToTarget(v.rakssid, IMessages:msgWaitPlayer())
                MsgSender.sendMsgToTarget(v.rakssid, IMessages:msgGamePlayerNum(self.site.playernum, GameConfig.startPlayers))
            end
        end
    end
end

function SiteProcess:waittingEnd()
    self.SelectTick = self.curTick
    self.curStatus = self.Status.Select
    self.CountDownTick = GameConfig.selectTime
    self:sendSelectData(true)
end

function SiteProcess:sendSelectData(isShow)
    local data = {}
    if isShow then
        local left_player = self.site.players[1]
        local right_player = self.site.players[2]
        local money = ChestConfig:getMoneyList()

        if self.curStatus == self.Status.Select then
            data.state = 0
        else
            data.state = 1
        end
        data.time = self.CountDownTick
        data.left_entityId = left_player:getEntityId()
        data.right_entityId = right_player:getEntityId()
        --手上枪id
        data.left_itemId = left_player:getHeldItemId()
        data.right_itemId = right_player:getHeldItemId()

        data.left_name = left_player.name
        data.right_name = right_player.name

        --Todo:get player's stage and score
        data.left_honor_stage = left_player.honorId + 1
        data.left_honor_score = left_player.honor
        data.right_honor_stage = right_player.honorId + 1
        data.right_honor_score = right_player.honor

        --default
        data.left_select_index = left_player.chest
        data.left_select_des = ChestConfig:getDesById(left_player.chest)
        data.right_select_index = right_player.chest
        data.right_select_des = ChestConfig:getDesById(right_player.chest)

        data.box_money1 = money[1]
        data.box_money2 = money[2]
        data.box_money3 = money[3]
        data.box_money4 = money[4]
        data.final_select_index = self.site.chest.id
        data.final_select_des = ChestConfig:getDesById(self.site.chest.id)
    end

    for i, v in pairs(self.site.players) do
        data.self_select_index = v.chest
        HostApi.sendOpenPixel1v1(v.rakssid, isShow, json.encode(data))
    end
end

function SiteProcess:ifSelectEnd()
    local seconds = GameConfig.selectTime - (self.curTick - self.SelectTick)
    self.CountDownTick = seconds

    if seconds <= 0 then
        self:doSelectEnd()
    end
end

function SiteProcess:doSelectEnd()
    self.curStatus = self.Status.Prepare
    self.PrepareTick = self.curTick
    self:selectChest()
end

function SiteProcess:selectChest()
    self.CountDownTick = GameConfig.prepareTime
    self:sendSelectData(true)
end

function SiteProcess:ifPrepareEnd()
    --prepare --> running
    local seconds = GameConfig.prepareTime - (self.curTick - self.PrepareTick)
    self.CountDownTick = seconds

    if seconds <= 10 and seconds > 0 then
        for i, v in pairs(self.site.players) do
            MsgSender.sendBottomTipsToTarget(v.rakssid, 3, IMessages:msgGameStartTimeHint(seconds, IMessages.UNIT_SECOND, false))
        end

        self:sendCountdownSound(seconds)

        if seconds == 1 then
            self:clearAllPlayerInv()
        end
    end

    if seconds <= 0 then
        self:doPrepareEnd()
    end
end

function SiteProcess:doPrepareEnd()
    self.curStatus = self.Status.Running
    self.RunningTick = self.curTick
    RewardManager:startGame()
    self:sendSelectData(false)
    self:prepareGame()
end

function SiteProcess:prepareGame()
    for i, player in pairs(self.site.players) do
        HostApi.setAutoShootEnable(player.rakssid, true)
        self:teleGamePos(player)
        player:initEquipItems()
        MsgSender.sendMsgToTarget(player.rakssid, Messages:msgGameStartTip())
    end
end

function SiteProcess:ifGameEnd()
    local ticks = self.curTick - self.RunningTick

    local seconds = GameConfig.gameTime - ticks
    self:showGameInfo(seconds)
    for i, player in pairs(self.site.players) do
        player:onTick()
    end

    if seconds % 60 == 0 and seconds / 60 > 0 then
        for i, v in pairs(self.site.players) do
            MsgSender.sendMsgToTarget(v.rakssid, IMessages:msgGameEndTimeHint(seconds / 60, IMessages.UNIT_MINUTE, false))
        end
    end

    if seconds <= 10 and seconds > 0 then
        for i, v in pairs(self.site.players) do
            MsgSender.sendBottomTipsToTarget(v.rakssid, 3, IMessages:msgGameEndTimeHint(seconds, IMessages.UNIT_SECOND, false))
        end

        self:sendCountdownSound(seconds)
    end

    if seconds <= 0 then
        self:ifPlayerWin()
    end
end

function SiteProcess:ifPlayerWin()
    if self.site:isTie() then
        self.curStatus = self.Status.ExtraTime
        self.ExtraTick = self.curTick
    else
        self:doWin()
    end
end

function SiteProcess:doWin()
    self.site:doAward()
    self:sendSelectData(false)
    self.curStatus = self.Status.WaitRevenge
    self.WaitRevengeTick = self.curTick
    for _, player in pairs(self.site.players) do
        if player.isLife == false then
            LuaTimer:cancel(player.respawnTaskKey)
        end
        BlockManager:clearPlayerBlock(player)
    end
    local winner = self.site:getWiner()
    PvpSettlement:SendSettlementResult(self.site.players, 3, winner)
end

function SiteProcess:ifExtraTimeEnd()
    --extratime --> gameover
    local ticks = self.curTick - self.ExtraTick

    local seconds = GameConfig.extraTime - ticks
    self:showGameInfo(seconds)
    for i, v in pairs(self.site.players) do
        v:onTick()
    end

    self:sendCountdownSound(seconds)

    if seconds <= 0 then
        self:ifPlayerWin()
    end
end

function SiteProcess:ifRevenge()
    local ticks = self.curTick - self.WaitRevengeTick

    local seconds = GameConfig.waitRevengeTime - ticks
    if self.site.isRevenge then
        --revenge
        self:reset()
    end
    if seconds <= 0 then
        self.curStatus = self.Status.WaitClose
        self.GameOverTick = self.curTick

        for i, v in pairs(self.site.players) do
            EngineUtil.sendEnterOtherGame(v.rakssid, "g1042", v.userId)
        end
    end
end

function SiteProcess:resetSite()
    local ticks = self.curTick - self.GameOverTick
    local seconds = GameConfig.gameOverTime - ticks
    if seconds <= 0 then
        self:doGameOverEnd()
    end
end

function SiteProcess:doGameOverEnd()
    self:sendSelectData(false)
    self.curStatus = self.Status.Waitting
end

function SiteProcess:reset()
    self.curStatus = self.Status.Waitting
    self.site.isRevenge = false
    for _, player in pairs(self.site.players) do
        local data = {}
        HostApi.sendOpenPixelResult(player.rakssid, false, json.encode(data), 0)
        HostApi.setAutoShootEnable(player.rakssid, false)
        if player.isLife == false then
            player:respawnRightNow()
        end
        self.site:teleSiteInitPos(player)
        player:getResetItem()
        player.chest = 1
        player.kills = 0
        player.headshots = 0
        player.dies = 0
        player.revenge = false
    end
    self:showGameInfo(0)
    self:sendSelectData(false)
end

function SiteProcess:isRunning(...)
    return self.curStatus > self.Status.Select and self.curStatus < self.Status.WaitRevenge
end

function SiteProcess:isSelect()
    return self.curStatus == self.Status.Select
end

function SiteProcess:onPlayerQuit(player)
    if self:isGameBegin() and player.isReward == false then
        SeasonManager:addUserHonor(player.userId, GameConfig.quitSubHonor, player.level)
    end
    if self:isRunning() then
        self.site:subDiamonds(player)
        self:doWin()
    elseif self.curStatus < self.Status.Prepare then
        self:reset()
    end
    BlockManager:clearPlayerBlock(player)
end

function SiteProcess:showGameInfo(time)
    local players = self.site.players
    local red = self.site:getPlayerKills("red")
    local blue = self.site:getPlayerKills("blue")
    for i, player in pairs(players) do
        HostApi.sendShowPixelGunGame1v1(player.rakssid, time, red, blue, self.site:getTeamByRakssId(player.rakssid))
    end
end

function SiteProcess:teleGamePos(player)
    local id = self.site:getTeamByRakssId(player.rakssid)
    local posion = self.site:randomPos(id)
    player:teleportPosWithYaw(posion.pos, posion.yaw)
    player.isLife = true
end

function SiteProcess:isGameOver()
    return self.curStatus > self.Status.ExtraTime
end

function SiteProcess:sendCountdownSound(seconds)
    local players = self.site.players
    for _, player in pairs(players) do
        if seconds <= 3 then
            HostApi.sendPlaySound(player.rakssid, 12)
        else
            HostApi.sendPlaySound(player.rakssid, 11)
        end
    end
end

function SiteProcess:isGameBegin()
    return self.curStatus > self.Status.Select
end

return SiteProcess