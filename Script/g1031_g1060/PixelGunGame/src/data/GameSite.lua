---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiaolai.
--- DateTime: 2018/12/24 19:20
---

require "base.util.class"
require "process.SiteProcess"
require "config.ChestConfig"
require "settlement.PvpSettlement"

GameSite = class()
GameSite.Blue = 1 --apos
GameSite.Red = 2 --bpos

function GameSite:ctor(config)
    self:init(config)
    self:setSiteProcess()
end

function GameSite:init(config)
    self.id = tonumber(config.id)
    self.initPos = {}
    self.apos = {}
    self.ayaw = {}
    self.bpos = {}
    self.byaw = {}
    self:initWaitPos(StringUtil.split(config.initPos, "#"))
    self:initRespawnAPos(config)
    self:initRespawnBPos(config)
    self.playernum = 0
    self.players = {}
    self.aIndex = false
    self.bIndex = false
    self.isRevenge = false
    self.chest = ChestConfig:getChestById(1)
end

function GameSite:reset()
    self.playernum = 0
    self.players = {}
    self.aIndex = false
    self.bIndex = false
    self.isRevenge = false
    self.chest = ChestConfig:getChestById(1)
    self.process:reset()
end

function GameSite:initWaitPos(pos)
    self.initPos.pos = VectorUtil.newVector3(tonumber(pos[1]), tonumber(pos[2]), tonumber(pos[3]))
    self.initPos.yaw = pos[4]
end

function GameSite:initRespawnAPos(config)
    local ax = StringUtil.split(config.ax, "#")
    local ay = StringUtil.split(config.ay, "#")
    local az = StringUtil.split(config.az, "#")
    local ayaw = StringUtil.split(config.ayaw, "#")
    for index, x in pairs(ax) do
        local item = {}
        item.pos = VectorUtil.newVector3(tonumber(x), tonumber(ay[index]), tonumber(az[index]))
        item.yaw = ayaw[index]
        table.insert(self.apos, item)
    end
end

function GameSite:initRespawnBPos(config)
    local bx = StringUtil.split(config.bx, "#")
    local by = StringUtil.split(config.by, "#")
    local bz = StringUtil.split(config.bz, "#")
    local byaw = StringUtil.split(config.byaw, "#")
    for index, x in pairs(bx) do
        local item = {}
        item.pos = VectorUtil.newVector3(tonumber(x), tonumber(by[index]), tonumber(bz[index]))
        item.yaw = byaw[index]
        table.insert(self.bpos, item)
    end
end

function GameSite:addPlayer(player)
    if self.players[GameSite.Blue] == nil then
        self.players[GameSite.Blue] = player
    else
        self.players[GameSite.Red] = player
    end
    self.playernum = self.playernum + 1
    if self.process:isRunning(self.id) then
        self.process:teleGamePos(player)
    end
    self.process:showGameInfo(0)
    self:teleSiteInitPos(player)
end

function GameSite:subPlayer(player)
    for i, v in pairs(self.players) do
        if v.rakssid == player.rakssid then
            self.players[i] = nil
            --self:resetPos(i)
        end
    end
    self.playernum = self.playernum - 1

    if self.playernum == 0 then
        self:reset()
        return
    end
    self.process:showGameInfo(0)
end

function GameSite:teleSiteInitPos(player)
    player:teleportPosWithYaw(self.initPos.pos, self.initPos.yaw)
end

function GameSite:randomPos(id)
    local index = 1
    if id == GameSite.Blue then
        index = math.random(1, #self.apos)
        return self.apos[index]
    elseif id == GameSite.Red then
        index = math.random(1, #self.bpos)
        return self.bpos[index]
    else
        return self.initPos
    end
end

function GameSite:setSiteProcess()
    self.process = SiteProcess.new(self)
end

function GameSite:isTie()
    if self.playernum == 2 then
        return self.players[GameSite.Blue].kills == self.players[GameSite.Red].kills
    end
    return false
end

function GameSite:getWiner()
    if self.playernum == 1 then
        for i, v in pairs(self.players) do
            if v ~= nil then
                return i
            end
        end
    end
    return self.players[GameSite.Blue].kills > self.players[GameSite.Red].kills and GameSite.Blue or GameSite.Red
end

function GameSite:doAward()
    local win = self:getWiner()
    local winer = self.players[win]
    for i, v in pairs(self.players) do
        if v.rakssid == winer.rakssid then
            --add chest
            table.insert(v.rewards,{
                Type = 3,
                Id = self.chest.id,
                Count = 1
            })
        else
            --sub money
            self:subDiamonds(v)
        end
    end
end

function GameSite:subDiamonds(player)
    if player == nil then
        return
    end
    player:consumeDiamonds(70000 + self.chest.id, self.chest.money, self.id)
end

function GameSite:updateChest()
    if self.playernum ~= 2 then
        return
    end
    local left = self.players[GameSite.Blue]
    local right = self.players[GameSite.Red]
    if left.chest ~= right.chest then
        local id = left.chest > right.chest and right.chest or left.chest
        self.chest = ChestConfig:getChestById(id)
        return
    else
        self.chest = ChestConfig:getChestById(left.chest)
        return
    end
end

function GameSite:getTeamByRakssId(rakssid)
    for i, v in pairs(self.players) do
        if v.rakssid == rakssid  then
            return i
        end
    end
end

function GameSite:canNotRevenge()
    for _, player in pairs(self.players) do
        HostApi.sendOpenPixelResultSpecialInfo(player.rakssid, false)
    end

end

function GameSite:getPlayerKills(key)
    if key == "red" then
        if self.players[GameSite.Red] ~= nil then
            return self.players[GameSite.Red].kills
        end
    elseif key == "blue" then
        if self.players[GameSite.Blue] ~= nil then
            return self.players[GameSite.Blue].kills
        end
    end
    return 0
end

function GameSite:updateRevenge()
    if self.playernum ~= 2 then
        return
    end
    if self.players[GameSite.Red].revenge == true and self.players[GameSite.Blue].revenge == true then
        self.isRevenge = true
    end
end

return GameSite