---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiaolai.
--- DateTime: 2018/11/30 16:09
---
require "base.util.VectorUtil"
require "Match"

GameNpc = class()

function GameNpc:ctor(config)
    self.id = config.id
    self.entityId = 0
    self.config = config
    self.actor = config.actor
    self.name = config.name
    self.pos = config.pos
    self.yaw = tonumber(config.yaw)
    self.changeable = config.changeable
    self.probability = config.probability
    self.tipHint = config.tipHint
    self.image = config.image
    self.blankActor = config.blankActor
    self.signStatus = 0
    self.needSyncSelect = false
    self:onCreate()
end

function GameNpc:onCreate()
    self.entityId = EngineWorld:addActorNpc(self.pos, self.yaw, self.actor)
    ActorNpcConfig:onAddActorNpc(self)
end

function GameNpc:onPlayerHit(player)
    if GameMatch.curStatus == GameMatch.Status.ChangeActor then
        if player.role == GamePlayer.ROLE_HIDE then
            self:HiderDisappearActor(player)
        else
            self:SeekSignActor(player)
        end
    end
end

function GameNpc:onPlayerReview(player)
    if player.role ~= GamePlayer.ROLE_SEEK then
        return
    end
    if self.signStatus <= 0 then
        return
    end
    EngineWorld:getWorld():setEntitySelected(player.rakssid, self.entityId, self.signStatus)
end

function GameNpc:HiderDisappearActor(player)
    if player.canHit == true then
        player.canHit = false
        if self.signStatus ~= 1 then
            player.actorDisappearTimes = player.actorDisappearTimes + 1
            self:removeActorNpc()
        else
            player.actorDisappearTimes = player.actorDisappearTimes + 1
            self:removeActorNpc()
            self.signStatus = 2
            self.needSyncSelect = true
            self.entityId = EngineWorld:addActorNpc(self.pos, self.yaw, self.blankActor)
            RankNpcConfig.blankActor[self.entityId] = 1
            ActorNpcConfig:onAddActorNpc(self)
            player.attackCache[tostring(self.entityId)] = 0
            self:syncSelectStatus()
        end
    else
        local price = ClickChangePriceConfig:getPriceByTime(player.actorDisappearTimes)
        if price == nil then
            price = ClickChangePriceConfig:getPriceByTime(player.actorMaxTimes)
        end      
        if player.attackCache[tostring(self.entityId)] ~= 0 then
            HostApi.showConsumeCoinTip(player.rakssid, self.tipHint, 1, price, self.entityId)
        end
    end
end

function GameNpc:SeekSignActor(player)
    if player.canHit == true then
        player.canHit = false
        player.actorSignTimes = player.actorSignTimes + 1
        self.signStatus = 1
        player.attackCache[tostring(self.entityId)] = 0
        self:syncSelectStatus()
    else
        local price = ClickChangePriceConfig:getPriceByTime(player.actorSignTimes)
        if price == nil then
            price = ClickChangePriceConfig:getPriceByTime(player.actorMaxTimes)
        end
       if player.attackCache[tostring(self.entityId)] ~= 0 then
            HostApi.showConsumeCoinTip(player.rakssid, self.tipHint, 1, price, self.entityId)
       end
    end
end

function GameNpc:syncSelectStatus()
    if self.signStatus <= 0 then
        return
    end
    local players = PlayerManager:getPlayers()
    for i, v in pairs(players) do
        if v.role == GamePlayer.ROLE_SEEK then
            EngineWorld:getWorld():setEntitySelected(v.rakssid, self.entityId, self.signStatus)
        end
    end
end

function GameNpc:onPlayerConfirm(player)
    local price = ClickChangePriceConfig:getPriceByTime(player.actorSignTimes)
    player:consumeDiamonds(self.entityId, price, self.entityId)
    player.canHit = true
end

function GameNpc:removeActorNpc()
    EngineWorld:removeEntity(self.entityId)
    self.entityId = 0
end

return GameNpc