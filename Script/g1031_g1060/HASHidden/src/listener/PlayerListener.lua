---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiaolai.
--- DateTime: 2018/11/5 14:44
---

require "base.messages.IMessages"
require "base.util.MsgSender"
require "base.util.VectorUtil"
require "base.code.GameOverCode"
require "messages.Messages"
require "data.GamePlayer"
require "config.SkillConfig"
require "Match"
require "config.ActorNpcConfig"
require "data.GameNpc"

PlayerListener = {}

function PlayerListener:init()
    BaseListener.registerCallBack(PlayerLoginEvent,self.onPlayerLogin)
    BaseListener.registerCallBack(PlayerLogoutEvent,self.onPlayerLogout)
    BaseListener.registerCallBack(PlayerReadyEvent, self.onPlayerReady)
    BaseListener.registerCallBack(PlayerRespawnEvent, self.onPlayerRespawn)

    PlayerDieEvent.registerCallBack(self.onPlayerDied)
    PlayerAttackedEvent.registerCallBack(self.onPlayerHurt)
    PlayerAttackActorNpcEvent.registerCallBack(self.onPlayerAttackActorNpc)
    PlayerClickChangeActorEvent.registerCallBack(self.onPlayerClickChangeActor)
    PlayerShotActorNpcEvent.registerCallBack(self.onPlayerShotActorNpc)
    PlayerReviewPlayerEvent.registerCallBack(self.onPlayerReviewPlayer)
    PlayerBuyActorResultEvent.registerCallBack(self.onPlayerBuyActorResult)
    PlayerBuyGoodsEvent.registerCallBack(self.onPlayerBuyGoods)
    PlayerSelectLotteryEvent.registerCallBack(self.onPlayerSelectLottery)
    PlayerLotteryAgainEvent.registerCallBack(self.onPlayerLotteryAgain)
    PlayerChangeActorEvent.registerCallBack(self.onPlayerChangeActor)
    PlayerDropItemEvent.registerCallBack(self.onPlayerDropItem)
    PlayerBackHallEvent.registerCallBack(self.onPlayerBackHall)
    PlayerReviewActorNpcEvent.registerCallBack(self.onPlayerReviewActorNpc)
    PlayerCurrencyChangeEvent.registerCallBack(self.onPlayerCurrencyChange)
end

function PlayerListener.onPlayerLogin(clientPeer)
    if GameMatch.curStatus >= GameMatch.Status.AssignRole then
        return GameOverCode.GameStarted
    end
    local player = GamePlayer.new(clientPeer)
    player:init()
    return GameOverCode.Success, player, 1
end

function PlayerListener.onPlayerLogout(player)
    if player.isLife == true then
        if GameMatch:isGameStart() or GameMatch.curStatus == GameMatch.Status.ChangeActor then
            GameMatch:onPlayerQuit(player)
        elseif GameMatch.curStatus == GameMatch.Status.AssignRole and PlayerManager:isPlayerEnough(GameConfig.startPlayers) == false then
            GameMatch.curStatus = GameMatch.Status.WaitingPlayer
        end
    end
end

function PlayerListener.onPlayerReady(player)
    DbUtil:getPlayerData(player)
    RankNpcConfig:getPlayerRankData(player)
    HostApi.sendPlaySound(player.rakssid, 10020)
    HostApi.sendShowHideAndSeekBtnStatus(player.rakssid, false, false, false)
    MsgSender.sendMsgToTarget(player.rakssid, IMessages:msgWelcomePlayer(Messages:gamename()))
    return 43200
end

function PlayerListener.onPlayerRespawn(player)
    player:teleInitPos()
    return 43200
end

function PlayerListener.onPlayerBuyGoods(rakssid, type, itemId, msg, isAddItem)
    local player = PlayerManager:getPlayerByRakssid(rakssid)
    if player == nil then
        return false
    end
    if GameMatch:isGameStart() == false then
        msg.value = IMessages:msgDontBuyGoodsByNoStart()
        return false
    end
    if SkillConfig:ifCanBuy(itemId, player.role) then
        msg.value = Messages:msgDontBuyGoodsByNoRole()
        return false
    end
    return true
end

function PlayerListener.onPlayerHurt(hurtPlayer, hurtFrom, damageType, hurtValue)
    if GameMatch:isGameStart() == false then
        return false
    end
    local hurter = PlayerManager:getPlayerByPlayerMP(hurtPlayer)
    local fromer = PlayerManager:getPlayerByPlayerMP(hurtFrom)
    if damageType == "outOfWorld" and hurter ~= nil then
        hurtValue.value = 999
        return true
    end

    if hurter ~= nil and fromer ~= nil then
        if damageType == "player" then
            return false
        end
        if hurter.role == fromer.role then
            return false
        end
        hurtValue.value = hurtValue.value - hurter.defense
        hurter:onHurted(hurtValue.value)
        MsgSender.sendBottomTipsToTarget(hurter.rakssid, 3, Messages:finded())
        fromer:onAttack()
        MsgSender.sendCenterTipsToTarget(fromer.rakssid, 3, Messages:findTrue())
        return true
    else
        return false
    end
end

function PlayerListener.onPlayerDied(diePlayer, iskillByPlayer, killPlayer)
    local dier = PlayerManager:getPlayerByPlayerMP(diePlayer)
    if dier == nil then
        return true
    end
    if iskillByPlayer and killPlayer then
        local killer = PlayerManager:getPlayerByPlayerMP(killPlayer)

        if killer == nil then
            return true
        end

        killer:onKill()

        dier:onDie()

        if dier.role == GamePlayer.ROLE_HIDE then
            MsgSender.sendMsg(IMessages:msgPlayerKillPlayer(dier.name, killer.name))
            HostApi.changePlayerPerspece(dier.rakssid, 0)
            HostApi.sendShowHideAndSeekBtnStatus(dier.rakssid, false, false, false)
            MsgSender.sendMsg(Messages:lastHide(GameMatch:getPlayerNumForRole(GamePlayer.ROLE_HIDE)))
        end
    else
        dier:onDie()
    end
    GameMatch:ifGameOverByPlayer()
    return true
end

function PlayerListener.onPlayerAttackActorNpc(rakssid, entityId)
    local player = PlayerManager:getPlayerByRakssid(rakssid)
    if player == nil then
        return
    end

    if RankNpcConfig.blankActor[entityId] == 1 then
        return
    end

    local npc = ActorNpcConfig:getActorByEntityId(entityId)
    if npc ~= nil then
        npc:onPlayerHit(player)
    end
end

function PlayerListener.onPlayerClickChangeActor(rakssid)
    if GameMatch:isCanChangeModel() == false then
        MsgSender.sendBottomTipsToTarget(rakssid, 3, Messages:changeActorByNoStart())
        return
    end
    local player = PlayerManager:getPlayerByRakssid(rakssid)
    if player == nil then
        return
    end
    player:showChangeModel()
end

function PlayerListener.onPlayerShotActorNpc(rakssid, entityId)
    local player = PlayerManager:getPlayerByRakssid(rakssid)
    if player == nil then
        return
    end
    if GameMatch:isGameLastTime() then
        MsgSender.sendCenterTipsToTarget(rakssid, 3, Messages:findFalseLast45Second())
        return
    end
    player:attackMiss()
    MsgSender.sendCenterTipsToTarget(rakssid, 3, Messages:findFalse())
    if player.hp <= 0 then
        player:death()
    end
end

function PlayerListener.onPlayerReviewPlayer(rakssid1, rakssid2)
    local player1 = PlayerManager:getPlayerByRakssid(rakssid1)
    local player2 = PlayerManager:getPlayerByRakssid(rakssid2)
    if player1 ~= nil and player2 ~= nil then
        if player1.role == player2.role then
            player1:setShowName(player1:buildShowName(), player2.rakssid)
        else
            player1:setShowName(" ", player2.rakssid)
        end

        if GameMatch:isChangeModel() then
            if player1.role ~= player2.role then
                player2:changeInvisible(player1.rakssid, true)
                player1:changeInvisible(player2.rakssid, true)
            end
            return
        end

        if GameMatch:isGameStart() and player1.ifSelectLottery then
            if player1.role ~= player2.role then
                player1:changeInvisible(player2.rakssid, false)
                player2:changeInvisible(player1.rakssid, false)
            end
            return
        else
            if player1.role == GamePlayer.ROLE_HIDE and player2.role == GamePlayer.ROLE_SEEK then
                player1:changeInvisible(player2.rakssid, true)
            end
            return
        end


    end
end

function PlayerListener.onPlayerBuyActorResult(rakssid, result)
    local player = PlayerManager:getPlayerByRakssid(rakssid)
    if player == nil then
        return
    end
    if result then
        player.changeLotteryTimes = player.changeLotteryTimes + 1
        player:spawnLotteryResult()
    end
end

function PlayerListener.onPlayerSelectLottery(rakssid, resultId)
    local player = PlayerManager:getPlayerByRakssid(rakssid)
    if player == nil then
        return
    end
    player:choiceActor(resultId)
end

function PlayerListener.onPlayerBackHall(rakssid)
    local player = PlayerManager:getPlayerByRakssid(rakssid)
    if player == nil then
        return
    end
    BackHallManager:addPlayer(player)
end

function PlayerListener.onPlayerLotteryAgain(rakssid)
    local player = PlayerManager:getPlayerByRakssid(rakssid)
    if player == nil then
        return
    end
    player:showChangeModel()
end

function PlayerListener.onPlayerChangeActor(rakssid)
    local player = PlayerManager:getPlayerByRakssid(rakssid)
    if player == nil then
        return
    end
    player:changeLottery()
end

function PlayerListener.onPlayerDropItem(rakssid, itemId, itemMeta)
    return false
end

function PlayerListener.onPlayerReviewActorNpc(rakssid, entityId)
    local player = PlayerManager:getPlayerByRakssid(rakssid)
    if player == nil then
        return
    end
    local npc = ActorNpcConfig:getActorByEntityId(entityId)
    if npc == nil then
        return
    end
    npc:onPlayerReview(player)
end

function PlayerListener.onPlayerCurrencyChange(rakssid, currency)
    local player = PlayerManager:getPlayerByRakssid(rakssid)
    if player ~= nil then
        player:onMoneyChange()
    end
end

return PlayerListener