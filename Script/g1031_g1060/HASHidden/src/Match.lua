---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/11/5 10:05
---
require "messages.Messages"
require "base.messages.IMessages"
require "base.util.MsgSender"
require "base.util.json"
require "base.util.DateUtil"
require "base.web.WebService"
require "config.ActorNpcConfig"
require "base.util.uuid"
require "util.LotteryUtil"
require "util.DbUtil"
require "util.SweepstakesUtil"
require "util.BackHallManager"
require "config.SkillConfig"

GameMatch = {}

GameMatch.gameType = "g1038"
GameMatch.curTick = 0
GameMatch.gameWaitTick = 0
GameMatch.gameAssignRoleTick = 0
GameMatch.gameChangeActorTick = 0
GameMatch.gameStartTick = 0
GameMatch.gameSecondChangeActorTick = 0
GameMatch.gameLastTick = 0
GameMatch.gameOverTick = 0
GameMatch.winRole = 0

GameMatch.Status = {}
GameMatch.Status.Init = 0
GameMatch.Status.WaitingPlayer = 1
GameMatch.Status.AssignRole = 2
GameMatch.Status.ChangeActor = 3
GameMatch.Status.Running = 4
GameMatch.Status.SecondChangeActor = 5
GameMatch.Status.GameLastTime = 6
GameMatch.Status.GameOver = 7
GameMatch.Status.CloseServer = 8
GameMatch.curStatus = GameMatch.Status.Init

GameMatch.ifFirstReady = false
GameMatch.isReward = false

function GameMatch:initMatch()
    GameTimeTask:start()
    SweepstakesUtil:setRandomSeed()
end

function GameMatch:onTick(ticks)
    self.curTick = ticks
    self:ifUpdateRank()

    local players = PlayerManager:getPlayers()
    for i, v in pairs(players) do
        v:addSpeedTick()
    end

    if self.curStatus == self.Status.WaitingPlayer then
        self:ifStartAssignRole()
    end

    if self.curStatus == self.Status.AssignRole then
        self:ifAssignRoleEnd()
    end

    if self.curStatus == self.Status.ChangeActor then
        self:ifGameBegin()
    end

    if self.curStatus == self.Status.Running then
        self:ifGameMiddle()
    end

    if self.curStatus == self.Status.SecondChangeActor then
        self:ifSecondChangeActor()
    end

    if self.curStatus == self.Status.GameLastTime then
        self:ifGameOver()
    end

    if self.curStatus == self.Status.GameOver then
        self:ifGameOverEnd()
    end

    if self.curStatus == self.Status.CloseServer then
        ReportManager:closeServer()
    end

    BackHallManager:onTick()
end

function GameMatch:ifUpdateRank()
    if self.curTick % 300 == 0 and PlayerManager:isPlayerExists() then
        RankNpcConfig:updateRank()
    end
end

function GameMatch:ifStartAssignRole()
    if PlayerManager:isPlayerEnough(GameConfig.startPlayers) then
        if self.ifFirstReady then
            MsgSender.sendMsg(IMessages:msgCanStartGame())
            MsgSender.sendMsg(IMessages:msgGameStartTimeHint(GameConfig.prepareTime, IMessages.UNIT_SECOND, false))
            self.gameWaitTick = self.curTick
            self.ifFirstReady = false
        end

        if self.curTick - self.gameWaitTick > GameConfig.prepareTime  then
            self:startAssignRole()
        else
            local seconds = GameConfig.prepareTime - (self.curTick - self.gameWaitTick)
            if seconds <= 10 and seconds > 0 then
               -- MsgSender.sendBottomTips(3, IMessages:msgGameStartTimeHint(seconds, IMessages.UNIT_SECOND, false))
               -- if seconds <= 3 then
               --     HostApi.sendPlaySound(0, 12);
               -- else
               --     HostApi.sendPlaySound(0, 11);
               -- end
            end
            if seconds == 3 then
                HostApi.sendStartGame(PlayerManager:getPlayerCount())
            end
        end
    else
        if self.curTick % 30 == 0 then
            MsgSender.sendMsg(IMessages:msgWaitPlayer())
            MsgSender.sendMsg(IMessages:msgGamePlayerNum(PlayerManager:getPlayerCount(), GameConfig.startPlayers))
        end
        self.ifFirstReady = true
    end
end


function GameMatch:startAssignRole()
    HostApi.sendGameStatus(0, 1)
    HostApi.sendStartGame(PlayerManager:getPlayerCount())
    self.isReward = false
    RewardManager:startGame()
    self.gameAssignRoleTick = self.curTick
    self.curStatus = self.Status.AssignRole
    MsgSender.sendMsg(Messages:assignRoleTimeHint(GameConfig.assignRoleTime))
    local players = PlayerManager:getPlayers()
    for i, v in pairs(players) do
        v.isInGame = true
    end
end

function GameMatch:assignRole()
    local players = PlayerManager:getPlayers()
    local playernum = #players
    if playernum < 1 then
        return false
    end
    local seeks = math.ceil(playernum / 4 + math.floor(playernum / 8))
    for i, v in pairs(players) do
        if v.role == GamePlayer.ROLE_PENDING then
            local random = math.random(1, playernum)
            if random <= seeks then
                if v.multiSeek < 1 then
                    if v:becomeRole(GamePlayer.ROLE_SEEK) then
                        seeks = seeks - 1
                        playernum = playernum - 1
                    end
                end
            else
                if v:becomeRole(GamePlayer.ROLE_HIDE) then
                    playernum = playernum - 1
                end
            end
        end
        v:teleRolePos()
    end
    self:rebuildShowName()
    self:sendAllPlayerTeamInfo()
    self:hideHide()
    self:hideSeek()
    return true
end

function GameMatch:hideHide()
    local players = PlayerManager:getPlayers()
    for i, p1 in pairs(players) do
        for j, p2 in pairs(players) do
            if p1.role ~= p2.role  then
                p1:changeInvisible(p2.rakssid, true)
            end
        end
    end
end

function GameMatch:hideSeek()
    local players = PlayerManager:getPlayers()
    for i, p1 in pairs(players) do
        for j, p2 in pairs(players) do
            if p1.role ~= p2.role  then

            end
        end
    end
end

function GameMatch:sendAllPlayerTeamInfo()
    local result = {}
    local players = PlayerManager:getPlayers()
    for i, v in pairs(players) do
        if v.isInGame then
            local item = {}
            item.userId = tonumber(tostring(v.userId))
            item.teamId = v.role
            table.insert(result, item)
        end
    end
    HostApi.sendPlayerTeamInfo(json.encode(result))
end

function GameMatch:rebuildShowName()
    local players = PlayerManager:getPlayers()
    for i, v in pairs(players) do
        v:sendBuildShowName(players)
    end
end

function GameMatch:ifAssignRoleEnd()
    local seconds = GameConfig.assignRoleTime - (self.curTick - self.gameAssignRoleTick)

    if seconds <= 10 and seconds > 0 then
        MsgSender.sendBottomTips(3, Messages:assignRoleTimeHint(seconds, IMessages.UNIT_SECOND, false))
        if seconds <= 3 then
            HostApi.sendPlaySound(0, 12);
        else
            HostApi.sendPlaySound(0, 11);
        end
    end

    if seconds <= 0 then
        self:assignRoleEnd()
        ActorNpcConfig:prepareActorNpc()
    end
end

function GameMatch:assignRoleEnd()
    if self:assignRole() then
        self.gameChangeActorTick = self.curTick
        self.curStatus = self.Status.ChangeActor
        MsgSender.sendMsg(IMessages:msgGameStart())
        self:showChangeAndHideHint(GameConfig.changeActorTime)
        HostApi.sendPlaySound(0, 10019)
    else
        self:GameOver()
    end
end

function GameMatch:GameOver()
    GameTimeTask:pureStop()
end

function GameMatch:showChangeAndHideHint(seconds)
    local players = PlayerManager:getPlayers()
    for i, v in pairs(players) do
        if v.role == GamePlayer.ROLE_HIDE then
            if seconds > 10 then
                MsgSender.sendMsgToTarget(v.rakssid, Messages:changeAndHideHint(seconds))
            end
        elseif v.role == GamePlayer.ROLE_SEEK then
            if seconds > 10 then
                MsgSender.sendMsgToTarget(v.rakssid, Messages:waitChangeAndHideHint(seconds))
            end
        end
    end
end

function GameMatch:ifGameBegin()
    local seconds = GameConfig.changeActorTime - (self.curTick - self.gameChangeActorTick);
    local players = PlayerManager:getPlayers()
    for i, player in pairs(players) do
        if player.role == GamePlayer.ROLE_HIDE then
            if seconds == GameConfig.changeActorTime - 10 then
                MsgSender.sendCenterTipsToTarget(player.rakssid,3, Messages:clickDisappearActor())
            end

            if seconds > 0 and seconds <=10 then
                MsgSender.sendBottomTipsToTarget(player.rakssid, seconds, Messages:changeAndHideTime(seconds))
            end
        elseif player.role == GamePlayer.ROLE_SEEK then
            if seconds == GameConfig.changeActorTime - 5 then
                MsgSender.sendCenterTipsToTarget(player.rakssid,3, Messages:clickSignActor())
            end            
        end

        if seconds <= 0 then
            MsgSender.sendCenterTipsToTarget(player.rakssid,3, Messages:gameStart())
        end
    end

    if seconds <= 0 then
        self:startGame()
    end
end

function GameMatch:startGame()
    self.gameStartTick = self.curTick
    self.curStatus = self.Status.Running
    self.role = role
    self.config = RoleConfig:getConfigByRole(self.role)
    self:superSeek()
    self:showHideSelecter()

    local players = PlayerManager:getPlayers()
    for i, player in pairs(players) do
        player:setAllowFlying(false)
        player:setSkill(player.config.skillId)
        player:setSpeedAddition(player.speed)
    end
    HostApi.syncGameTimeShowUi(0, true, GameConfig.gameTime + GameConfig.secondChangeActorTime + GameConfig.gameLastTime)
end

function GameMatch:superSeek()
    local players = PlayerManager:getPlayers()
    for i, v in pairs(players) do
        if v.role == GamePlayer.ROLE_SEEK then
            v:teleRolePos()
            v:seekAddGun()
        end
    end
end

function GameMatch:showHideSelecter()
    local players = PlayerManager:getPlayers()
    for i, player in pairs(players) do
        if player.role == GamePlayer.ROLE_HIDE then
            self:showHide(player.rakssid)
        end
    end
end

function GameMatch:showHide(rakssId)
    local player = PlayerManager:getPlayerByRakssid(rakssId)
    local players = PlayerManager:getPlayers()
    for i, p in pairs(players) do
        if player.role == GamePlayer.ROLE_HIDE and p.role == GamePlayer.ROLE_SEEK then
            if self.curStatus > self.Status.ChangeActor and player.ifSelectLottery then
                player:changeInvisible(p.rakssid, false)
            end
        end
    end
end

function GameMatch:showSeek()
    local players = PlayerManager:getPlayers()
    for i, p1 in pairs(players) do
        for j, p2 in pairs(players) do
            if p1.role == GamePlayer.ROLE_SEEK and p2.role == GamePlayer.ROLE_HIDE then
                if self.curStatus > self.Status.ChangeActor then
                    p1:changeInvisible(p2.rakssid, false)
                end
            end
        end
    end
end

function GameMatch:ifGameMiddle()
    local ticks = self.curTick - self.gameStartTick
    local seconds = GameConfig.gameTime - ticks
    self:onPlayerLive(ticks)
    if seconds == GameConfig.gameTime - 2 then
        self:showSeek()
    end

    local players = PlayerManager:getPlayers()
    if seconds <= 8 and seconds > 0 then
        for i, player in pairs(players) do
            if player.role == GamePlayer.ROLE_HIDE and player.isLife == true then
                MsgSender.sendCenterTipsToTarget(player.rakssid, seconds, Messages:secondAssignRoleTimeHint(seconds, IMessages.UNIT_SECOND, false))
            end
        end
    end

    if seconds <= 0 then
        self.gameSecondChangeActorTick = self.curTick
        self.curStatus = self.Status.SecondChangeActor
    end
end

function GameMatch:ifSecondChangeActor()
    local ticks = self.curTick - self.gameSecondChangeActorTick
    local seconds = GameConfig.secondChangeActorTime - ticks
    if seconds == GameConfig.secondChangeActorTime then
        self.secondChangeActorTime = GameConfig.secondChangeActorTime
        local players = PlayerManager:getPlayers()
        for i, player in pairs(players) do
            if player.role == GamePlayer.ROLE_HIDE and player.isLife == true then
                player:spawnLotteryResult()
            end
        end
    end
    if seconds < 0 then
        self.gameLastTick = self.curTick
        self.curStatus = self.Status.GameLastTime
    end
end

function GameMatch:ifGameOver()
    local ticks = self.curTick - self.gameLastTick
    local seconds = GameConfig.gameLastTime - ticks
    self:onPlayerLive(ticks)

    if seconds == GameConfig.gameLastTime then
        local players = PlayerManager:getPlayers()
        for i, player in pairs(players) do
            if player.role == GamePlayer.ROLE_SEEK then
                player:subGunFireCd()
            end
        end
        MsgSender.sendCenterTips(3, Messages:last45Second(seconds))
    end
    if seconds <= 3 then
        HostApi.sendPlaySound(0, 12);
    else
        HostApi.sendPlaySound(0, 11);
    end
    if seconds <= 0 then
        self:doHideWin()
    end
end

function GameMatch:onPlayerLive(ticks)
    local players = PlayerManager:getPlayers()
    for i, v in pairs(players) do
        v:onLive(ticks)
    end
end

function GameMatch:isGameStart()
    return self.curStatus > self.Status.ChangeActor
end

function GameMatch:ifGameEnd()
    return self.curStatus == self.Status.GameOver
end

function GameMatch:isChangeModel()
    return self.curStatus == self.Status.ChangeActor
end

function GameMatch:isCanChangeModel()
    return self.curStatus > self.Status.AssignRole
end

function GameMatch:isGameOver()
    return self.curStatus == self.Status.GameOver
end

function GameMatch:isGameLastTime()
    return self.curStatus == self.Status.GameLastTime
end

function GameMatch:ifGameOverByPlayer()
    local hasHide, hasSeek = false, false
    local players = PlayerManager:getPlayers()
    for i, v in pairs(players) do
        if v.role == GamePlayer.ROLE_SEEK and v.isLife then
            hasSeek = true
        end
        if v.role == GamePlayer.ROLE_HIDE and v.isLife then
            hasHide = true
        end
    end
    if hasHide == false and hasSeek then
        self:doSeekWin()
        return true
    end
    if hasHide and hasSeek == false then
        self:doHideWin()
        return true
    end
    return false
end

function GameMatch:doSeekWin()
    self.GameOverTick = self.curTick
    self.winRole = GamePlayer.ROLE_SEEK
    if self.isReward == false then
        self.isReward = true
        self.gameOverTick = self.curTick
        self.curStatus = self.Status.GameOver
        MsgSender.sendMsg(IMessages:msgWinnerInfo(Messages:getRoleName(GamePlayer.ROLE_SEEK)))
        local players = PlayerManager:getPlayers()
        for i, v in pairs(players) do
            if v.role == GamePlayer.ROLE_SEEK then
                v:onWin()
            end
            RankNpcConfig:savePlayerRankScore(v)
        end

        RewardUtil:doReward(GamePlayer.ROLE_SEEK)
        RewardUtil:doReport()
    end
end

function GameMatch:doHideWin()
    self.GameOverTick = self.curTick
    self.winRole = GamePlayer.ROLE_HIDE
    if self.isReward == false then
        self.isReward = true
        self.gameOverTick = self.curTick
        self.curStatus = self.Status.GameOver
        MsgSender.sendMsg(IMessages:msgWinnerInfo(Messages:getRoleName(GamePlayer.ROLE_HIDE)))
        local players = PlayerManager:getPlayers()
        for i, v in pairs(players) do
            if v.role == GamePlayer.ROLE_HIDE then
                if v.isLife == true then
                    v.hideTime = os.clock()
                end
                v:onWin()
            end
            RankNpcConfig:savePlayerRankScore(v)
        end

        RewardUtil:doReward(GamePlayer.ROLE_HIDE)
        RewardUtil:doReport()
    end
end

function GameMatch:getPlayerNumForRole(role)
    local num = 0
    local players = PlayerManager:getPlayers()
    for i, v in pairs(players) do
        if v.role == role and v.isInGame and v.isLife then
            num = num + 1
        end
    end
    return num
end

function GameMatch:ifGameOverEnd()
    local ticks = self.curTick - self.GameOverTick
    local seconds = GameConfig.gameOverTime - ticks
    HostApi.syncGameTimeShowUi(0, false, 0)
    if seconds <= 0 then
        self:doGameOverEnd()
    end
    MsgSender.sendBottomTips(3, IMessages:msgCloseServerTimeHint(seconds))
end

function GameMatch:doGameOverEnd()
    self.curStatus = self.Status.CloseServer
    local players = PlayerManager:copyPlayers()
    for _, player in pairs(players) do
        player:overGame(self.winRole)
    end
    GameTimeTask:pureStop()
end

function GameMatch:getLifeTeams()
    local lifeTeam = 0
    local players = PlayerManager:getPlayers()
    for i, v in pairs(players) do
        if v.role == GamePlayer.ROLE_SEEK and v.isLife then
            lifeTeam = lifeTeam + 1
        end
        if v.role == GamePlayer.ROLE_HIDE and v.isLife then
            lifeTeam = lifeTeam + 1
        end
    end
    return lifeTeam
end

function GameMatch:onPlayerQuit(player)
    self:ifGameOverByPlayer()
end


return GameMatch