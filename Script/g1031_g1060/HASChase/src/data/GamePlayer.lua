---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/11/5 15:24
---
require "base.util.class"
require "base.data.BasePlayer"
require "Match"
GamePlayer = class("GamePlayer", BasePlayer)

GamePlayer.ROLE_PENDING = 0  -- 待定
GamePlayer.ROLE_SEEK = 1   -- 搜寻者
GamePlayer.ROLE_HIDE = 2 -- 躲藏者
GamePlayer.LIVE = 1
GamePlayer.KILL = 5
GamePlayer.WIN = 20

function GamePlayer:init()

    self:initStaticAttr(0)

    self.config = {}

    self.hp = 0
    self.maxHp = 0
    self.score = 0
    self.gameScore = 0
    self.multiSeek = 0
    self.isInGame = false
    self.isLife = true
    self.role = GamePlayer.ROLE_PENDING
    self.config = {}
    self.model = {}
    self.lastModel = {}
    self.attackCache = {}
    self.changeModelTimes = 1
    self.isReport = false
    self.isAnimal = false
    self.gunId = {}
    self.defense = 0
    self.gun = {}
    self.skill = {}
    self.timerList = {}
    self:teleInitPos()
    self:clearInv()
    self:initHP()
    self:initScorePoint()
    self:setShowName(self:buildShowName())
    HostApi.changePlayerPerspece(self.rakssid, 0)
    self.hallMoney = 0
    self.isAddMoney = false
    self.isWiner = 0
    self.hideTime = 0
    self.killNum = 0
    self.isSingleReward = false
end

function GamePlayer:teleInitPos()
    self.isInGame = false
    self:teleportPos(GameConfig.initPos)
end

function GamePlayer:setWeekRank(id, rank, score)
    local npc = RankNpcConfig:getRankNpc(id)
    if npc then
        RankManager:addPlayerWeekRank(self, npc.key, rank, score, function(npc)
            npc:sendRankData(self)
        end, npc)
    end
end

function GamePlayer:sendBuildShowName(players)
    local name = self:buildShowName()
    for i, player in pairs(players) do
        if player.role == self.role then
            self:setShowName(name, player.rakssid)
        else
            self:setShowName(" ", player.rakssid)
        end
    end
end


function GamePlayer:becomeRole(role)
    if self.isInGame then
        self.role = role
        MsgSender.sendMsgToTarget(self.rakssid, Messages:becomeRole(role))
        self.config = RoleConfig:getConfigByRole(self.role)
        self.maxHp = self.config.hp
        self.speedLevel = self.config.speedLevel
        self:changeMaxHealth(self.config.hp)
        self:setHealth(self.config.hp)
        self:setSkill(self.config.skillId)
        if role == GamePlayer.ROLE_SEEK then
            self.entityPlayerMP:setOccupation(1)
            self.gunId = self.config.gunId
            self:seekAddGun()
            self.multiSeek = self.multiSeek + 1
            HostApi.changePlayerPerspece(self.rakssid, 0)
            HostApi.sendShowHideAndSeekBtnStatus(self.rakssid, false, false, false)
            MsgSender.sendCenterTipsToTarget(self.rakssid, 3, Messages:becomeSeekHint(GameConfig.changeActorTime))
        end

        if role == GamePlayer.ROLE_HIDE then
            self.entityPlayerMP:setOccupation(2)
            self.defense = self.config.defense
            self.model = ActorNpcConfig:randomModel()
            self.lastModel = self.model
            self:teleportPos(self.model.pos)
            self.multiSeek = 0
            HostApi.changePlayerPerspece(self.rakssid, 1)
            HostApi.sendShowHideAndSeekBtnStatus(self.rakssid, true, false, true)
            MsgSender.sendCenterTipsToTarget(self.rakssid, 3, Messages:becomeHideHint(GameConfig.changeActorTime))
            self:changeActor()
        end
        return true
    end
    return false
end

function GamePlayer:getModelName()
    return self.model.name
end

function GamePlayer:onHurt(hurt)
    if self:getHealth() - hurt > 0 then
        self.entityPlayerMP:setOnHurt(GameConfig.showBloodTime * 1000)
    end
end

function GamePlayer:onKill()
    self.killNum = self.killNum + 1 
    self.scorePoints[ScoreID.KILL] = self.scorePoints[ScoreID.KILL] + 1
    self.score = self.score + self.KILL
    self.gameScore = self.gameScore + self.KILL
    self:addAppIntegral(self.KILL)
end

function GamePlayer:setSkill(id)
    self.skill = SkillConfig:getSkill(id)
    self:addItem(self.skill.itemId, 1, 0)
end

function GamePlayer:attackMiss()
    local gun = GunsConfig:getGunByItemId(self:getHeldItemId())
    local hurt = gun.missAttack
    self:subHealth(hurt)
end

function GamePlayer:seekAddGun()
    for i, id in pairs(self.gunId) do
        local gun = GunsConfig:getGunById(id)
        self:addGunItem(gun.itemId, 1, gun.attack, gun.bulletId)
    end
end

function GamePlayer:changeActor()
    ActorNpcConfig:removeActorNpc(self.model)
    EngineWorld:changePlayerActor(self, self.model.actor)
end

function GamePlayer:ChangeModel()
    self.changeModelTimes = self.changeModelTimes + 1
    self.model = ActorNpcConfig:randomModel(self.lastModel)
    ActorNpcConfig:replyModel(self.lastModel)
    self.lastModel = self.model
    self:changeActor()

end

function GamePlayer:ifChangeModel()
    if self.changeModelTimes == 0 then
        self:ChangeModel()
    else
        local price = ChangePriceConfig:getPriceByTime(self.changeModelTimes)
        if price == nil then
            MsgSender.sendBottomTipsToTarget(self.rakssid, 3, Messages:changeActorByNoTimes(self.changeModelTimes))
            return
        end
        self.entityPlayerMP:setChangePlayerActor(false, self.changeModelTimes, price, self.model.actor)
    end
end

function GamePlayer:startTimer(time, callback)
    local item = {}
    item.time = time
    item.callback = callback
    table.insert(self.timerList, item)
end

function GamePlayer:clearTimer()
    if self.timerList ~= nil then
        for i, timer in pairs(self.timerList) do
            table.remove(self.timerList, i)
        end
    end
end

function GamePlayer:invokeTimer()
    if self.timerList ~= nil then
        for i, timer in pairs(self.timerList) do
            timer.time = timer.time - 1
            if timer.time <= 0 and type(timer.callback) == "function" then
                timer.callback()
                table.remove(self.timerList, i)
            end
        end
    end
end

function GamePlayer:sneer(i)
    local time = GameConfig.sneerKeepTime / GameMatch.sneerNum
    self:changeClothes("custom_head_effect", i)
    self:startTimer(time, function()
        if i < GameMatch.sneerNum then
            self:sneer(i + 1)
        else
            self:changeClothes("custom_head_effect", 0)
        end
    end)
end

function GamePlayer:changeAnimal(time)
    local actor = AnimalActorConfig:randomActor()
    EngineWorld:changePlayerActor(self, actor)
    HostApi.changePlayerPerspece(self.rakssid, 1)
    self.entityPlayerMP:setDisableMove(time * 1000)
    self.isAnimal = true
    self:startTimer(time, function()
        EngineWorld:restorePlayerActor(self)
        HostApi.changePlayerPerspece(self.rakssid, 0)
        self.isAnimal = false
    end )
end

function GamePlayer:teleRolePos()
    if self.role == GamePlayer.ROLE_SEEK then
        self:teleportPos(GameConfig:randomSeekPos())
    end
end

function GamePlayer:setDayRank(id, rank, score)
    local npc = RankNpcConfig:getRankNpc(id)
    if npc then
        RankManager:addPlayerDayRank(self, npc.key, rank, score, function(npc)
            npc:sendRankData(self)
        end, npc)
    end
end

function GamePlayer:subGunFireCd()
    self.entityPlayerMP:subGunFireCd(self.gun.itemId, self.gun.speed)
end

function GamePlayer:initHP()
    self:setHealth(20)
end

function GamePlayer:getRoleName()
    if self.config == nil then
        return ""
    end
    if self.role == GamePlayer.ROLE_HIDE then
        return TextFormat.colorGreen .. "[" .. self.config.name .. "]"
    elseif self.role == GamePlayer.ROLE_SEEK then
        return TextFormat.colorRed .. "[" .. self.config.name .. "]"
    else
        return ""
    end
end

function GamePlayer:buildShowName()
    local nameList = {}
    local nameListNum = 1

    if self.staticAttr.title ~= nil then
        nameList[nameListNum] = self.staticAttr.title
        nameListNum = nameListNum + 1
    end

    if self.staticAttr.role ~= -1 then
        local clanTitle = TextFormat.colorGreen .. self.staticAttr.clanName
        if self.staticAttr.role == 0 then
            clanTitle = clanTitle .. TextFormat.colorWrite .. "[Member]"
        end
        if self.staticAttr.role == 10 then
            clanTitle = clanTitle .. TextFormat.colorRed .. "[Elder]"
        end
        if self.staticAttr.role == 20 then
            clanTitle = clanTitle .. TextFormat.colorOrange .. "[Chief]"
        end
        nameList[nameListNum] = clanTitle
        nameListNum = nameListNum + 1
    end

    local roleName = self:getRoleName()
    if #roleName ~= 0 then
        nameList[nameListNum] = roleName
        nameListNum = nameListNum + 1
    end

    local disName = TextFormat.colorWrite .. self.name
    if self.staticAttr.lv > 0 then
        disName = TextFormat.colorGold .. "[Lv" .. tostring(self.staticAttr.lv) .. "]" .. TextFormat.colorWrite .. self.name
    end

    nameList[nameListNum] = disName
    nameListNum = nameListNum + 1

    local showName
    for i, v in pairs(nameList) do
        local lineName = v
        if (showName == nil) then
            showName = lineName
        else
            showName = showName .. "\n" .. lineName
        end
    end

    return showName
end

function GamePlayer:onLive(ticks)
    if self.role == GamePlayer.ROLE_HIDE then
        if ticks % 10 == 0 and self.isLife then
            self.score = self.score + self.LIVE
            self.gameScore = self.gameScore + self.LIVE
            self:addAppIntegral(self.LIVE)
        end
        if self.isLife then
            self.scorePoints[ScoreID.LIVE] = self.scorePoints[ScoreID.LIVE] + 1
        end
    end
end

function GamePlayer:initDataFromDB(data)
    if #data ~= 0 then
        local json_data = json.decode(data)
        self.hallMoney = json_data.money or 0
        self:setCurrency(self.hallMoney)
    end
end

function GamePlayer:onMoneyChange()
    self.hallMoney = self:getCurrency()
    DBUtil:savePlayerData(self, true)

end

function GamePlayer:addMoney(gold)
    self:addCurrency(gold)
end

function GamePlayer:reward()
    if RewardManager:isUserRewardFinish(self.userId) then
        return
    end
    HostApi.sendPlaySound(self.rakssid, 10024)
    DBUtil:savePlayerData(self, true)
    local rank = RewardUtil:getPlayerRank(self)
    ReportManager:reportUserData(self.userId, self.scorePoints[ScoreID.KILL], rank, 1)
    RewardManager:getUserReward(self.userId, rank, function(data)
        if GameMatch:isGameOver() == false then
            self:sendPlayerSettlement()
        end
    end)
    UserExpManager:addUserExp(self.userId, false, 2)
    self.isReport = true
    self.isSingleReward = true
end

function GamePlayer:sendPlayerSettlement()
    local settlement = {}
    settlement.rank = RewardUtil:getPlayerRank(self)
    settlement.name = self.name
    settlement.isWin = 0
    settlement.points = self.scorePoints
    settlement.gold = self.gold
    settlement.available = self.available
    settlement.hasGet = self.hasGet
    settlement.vip = self.vip
    settlement.kills = self.kills
    settlement.adSwitch = self.adSwitch or 0
    if settlement.gold <= 0 then
        settlement.adSwitch = 0
    end
    self:addMoney(self.gold)
    self.isAddMoney = true
    RankNpcConfig:savePlayerRankScore(self)
    HostApi.sendPlayerSettlement(self.rakssid, json.encode(settlement), false)
end

function GamePlayer:overGame(win)
    self:clearTimer()
    RankNpcConfig:savePlayerRankScore(self)
    if self.role == win then
        HostApi.sendGameover(self.rakssid, IMessages:msgGameOverWin(), GameOverCode.GameOver)
    else
        HostApi.sendGameover(self.rakssid, IMessages:msgGameOver(), GameOverCode.GameOver)
    end
end

function GamePlayer:onDie()
    if self.isLife then
        self.entityPlayerMP:showBossStripWithIcon("", 0, 0, " ")
        self.isLife = false
        self.hp = 0
        self:clearInv()
        self:clearTimer()
        HostApi.broadCastPlayerLifeStatus(self.userId, self.isLife)
        self:reward()
         if GameMatch.hideNum == 0 or GameMatch.seekNum == 0 then
             return
         end
    end
    if self.role == self.ROLE_HIDE then
        self.hideTime = os.clock()
        HostApi.changePlayerPerspece(self.rakssid, 0)
        HostApi.sendShowHideAndSeekBtnStatus(self.rakssid, false, false, false)
        MsgSender.sendMsg(Messages:lastHide(GameMatch.hideNum))
    end
end

function GamePlayer:onWin()
    self.isWiner = 1
    self.score = self.score + self.WIN
    self.gameScore = self.gameScore + self.WIN
    self:addAppIntegral(self.WIN)
end

function GamePlayer:addAppIntegral(integral)
    if self.role == GamePlayer.ROLE_HIDE then
        self.appIntegral = self.appIntegral + integral
    elseif self.role == GamePlayer.ROLE_SEEK then
        self.appIntegral = self.appIntegral + integral * 5
    end
end

function GamePlayer:initScorePoint()
    self.scorePoints[ScoreID.LIVE] = 0
    self.scorePoints[ScoreID.KILL] = 0
end

function GamePlayer:setCameraLocked(isLocked)
    if self.entityPlayerMP ~= nil then
        self.entityPlayerMP:setCameraLocked(isLocked)
    end
end

function GamePlayer:changeInvisible(rakssid, invisible)
    if self.entityPlayerMP ~= nil then
        self.entityPlayerMP:changeInvisible(rakssid, invisible)
    end
end

return GamePlayer