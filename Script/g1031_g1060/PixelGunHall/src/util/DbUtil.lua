---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/9/20 11:05
---
DbUtil = {}
DbUtil.GAME_DATA = 1
DbUtil.MODE_DATA = 2
DbUtil.ARMORY_DATA = 3
DbUtil.PROTECT_ARMOR = 4
DbUtil.REWARD_DATA = 5

DbUtil.GetDataCaches = {}

function DbUtil:getPlayerData(player)
    DBManager:getPlayerData(player.userId, DbUtil.GAME_DATA)
    DBManager:getPlayerData(player.userId, DbUtil.MODE_DATA)
    DBManager:getPlayerData(player.userId, DbUtil.ARMORY_DATA)
    DBManager:getPlayerData(player.userId, DbUtil.PROTECT_ARMOR)
    DBManager:getPlayerData(player.userId, DbUtil.REWARD_DATA)
    local cache = {
        { DataType = DbUtil.GAME_DATA, HasGet = false },
        { DataType = DbUtil.MODE_DATA, HasGet = false },
        { DataType = DbUtil.ARMORY_DATA, HasGet = false },
        { DataType = DbUtil.PROTECT_ARMOR, HasGet = false },
        { DataType = DbUtil.REWARD_DATA, HasGet = false }
    }
    DbUtil.GetDataCaches[tostring(player.userId)] = cache
end

function DbUtil:onPlayerGetDataFinish(player, data, subKey)
    local cache = DbUtil.GetDataCaches[tostring(player.userId)]
    if not cache then
        cache = {
            { DataType = DbUtil.GAME_DATA, HasGet = false },
            { DataType = DbUtil.MODE_DATA, HasGet = false },
            { DataType = DbUtil.ARMORY_DATA, HasGet = false },
            { DataType = DbUtil.PROTECT_ARMOR, HasGet = false },
            { DataType = DbUtil.REWARD_DATA, HasGet = false }
        }
    end
    for _, tag in pairs(cache) do
        if tag.DataType == subKey then
            tag.HasGet = true
            break
        end
    end
    DbUtil.GetDataCaches[tostring(player.userId)] = cache
    player:initDataFromDB(data, subKey)
end

function DbUtil:onPlayerQuit(player)
    DbUtil.GetDataCaches[tostring(player.userId)] = nil
end

function DbUtil:saveAllPlayerData()
    if GameMatch.curTick == 0 or GameMatch.curTick % 30 ~= 0 then
        return
    end

    local players = PlayerManager:getPlayers()
    for i, player in pairs(players) do
        self:savePlayerData(player)
    end
end

function DbUtil:savePlayerData(player, immediate)
    if player == nil then
        return
    end
    DbUtil:SavePlayerGameData(player, immediate)
    DbUtil:SavePlayerModelData(player, immediate)
    DbUtil:SavePlayerArmoryData(player, immediate)
    DbUtil:SavePlayerProtectArmorData(player, immediate)
    DbUtil:SavePlayerRewardData(player, immediate)
end

function DbUtil:CanSavePlayerData(player, subKey)
    local cache = DbUtil.GetDataCaches[tostring(player.userId)]
    if not cache then
        return false
    end
    for _, tag in pairs(cache) do
        if tag.DataType == subKey then
            return tag.HasGet
        end
    end
    return false
end

function DbUtil:SavePlayerGameData(player, immediate)
    if not DbUtil:CanSavePlayerData(player, DbUtil.GAME_DATA) then
        return
    end
    local data = {}
    data.level = player.level
    data.money = player.money
    data.cur_exp = player.cur_exp
    data.armor_value = player.armor_value
    data.yaoshi = player.yaoshi
    data.chests = player.chests
    data.chest_integral = player.chest_integral
    data.equip_guns = player.equip_guns
    data.equip_props = player.equip_props
    data.equip_blocks = player.equip_blocks
    data.cur_is_random = player.cur_is_random
    data.cur_map_id = player.cur_map_id
    data.mode_first = player.mode_first
    data.mode_first_day_id = player.mode_first_day_id
    data.vip_time = player.vip_time
    DBManager:savePlayerData(player.userId, DbUtil.GAME_DATA, json.encode(data), immediate)
end

function DbUtil:SavePlayerModelData(player, immediate)
    if not DbUtil:CanSavePlayerData(player, DbUtil.MODE_DATA) then
        return
    end
    local data = {}
    data.init_exp = player.init_exp
    data.unlock_map = player.unlock_map
    data.fragment_jindu = player.fragment_jindu
    data.fragment_jindu_day_id = player.fragment_jindu_day_id
    DBManager:savePlayerData(player.userId, DbUtil.MODE_DATA, json.encode(data), immediate)
end

function DbUtil:SavePlayerArmoryData(player, immediate)
    if not DbUtil:CanSavePlayerData(player, DbUtil.ARMORY_DATA) then
        return
    end
    local data = {}
    data.guns = player.guns
    data.props = player.props
    data.blocks = player.blocks
    DBManager:savePlayerData(player.userId, DbUtil.ARMORY_DATA, json.encode(data), immediate)
end

function DbUtil:SavePlayerProtectArmorData(player, immediate)
    if not DbUtil:CanSavePlayerData(player, DbUtil.PROTECT_ARMOR) then
        return
    end
    local data = {}
    data.armor_level = player.armor_level
    data.armor_upTime = player.armor_upTime
    DBManager:savePlayerData(player.userId, DbUtil.PROTECT_ARMOR, json.encode(data), immediate)
end

function DbUtil:SavePlayerRewardData(player, immediate)
    if not DbUtil:CanSavePlayerData(player, DbUtil.REWARD_DATA) then
        return
    end
    local data = {}
    data.rewards = player.rewards
    DBManager:savePlayerData(player.userId, DbUtil.REWARD_DATA, json.encode(data), immediate)
end

return DbUtil