---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Jimmy.
--- DateTime: 2018/12/30 0030 14:21
---
GameGunStore = {}
GameGunStore.Status = {
    LOCK = 0,
    NOT_GET = 1,
    NEW = 2,
    HAS_GET = 3,
    HAS_USE = 4,
}

function GameGunStore:sendUpdateStoreGunData(player, data)
    HostApi.sendUpdateStoreGunData(player.rakssid, json.encode(data))
end

function GameGunStore:sendUpdateStorePropData(player, data)
    HostApi.sendUpdateStorePropData(player.rakssid, json.encode(data))
end

function GameGunStore:initGunStoreData(player)
    for _, gun in pairs(GunConfig.Guns) do
        if gun.HasGet then
            local data = {
                Id = gun.Id,
                Level = 1,
                Status = GameGunStore.Status.HAS_GET,
                Chip = 0,
                UpgradeTime = 0,
            }
            if player.equip_guns[tostring(gun.TabType)] == nil then
                data.Status = GameGunStore.Status.HAS_USE
                player.equip_guns[tostring(gun.TabType)] = {
                    Id = gun.Id,
                    ItemId = gun.ItemId,
                    PropertyIds = gun.PropertyIds,
                    AddDamage = GunLevelConfig:getGunLevelDamage(gun.Id, 1)
                }
            end
            table.insert(player.guns, data)
        end
    end
    for _, prop in pairs(PropConfig.Props) do
        if prop.HasGet then
            if prop.Type == PropConfig.PropType.Prop then
                local data = {
                    Id = prop.Id,
                    Level = 1,
                    Status = GameGunStore.Status.HAS_GET,
                    Chip = 0,
                    UpgradeTime = 0,
                }
                if #player.equip_props < 2 then
                    data.Status = GameGunStore.Status.HAS_USE
                    table.insert(player.equip_props, {
                        Id = prop.Id,
                        ItemId = prop.ItemId,
                        PropertyIds = prop.PropertyIds,
                        AddValues = PropLevelConfig:getPropLevelValues(prop.Id, 1)
                    })
                end
                table.insert(player.props, data)
            else
                local data = {
                    Id = prop.Id,
                    Level = 1,
                    Status = GameGunStore.Status.HAS_GET,
                    Chip = 0,
                    UpgradeTime = 0,
                }
                if player.equip_blocks[tostring(prop.TabType)] == nil then
                    data.Status = GameGunStore.Status.HAS_USE
                    local life, count = AttributeConfig:getBlockAttribute(PropLevelConfig:getPropLevelValues(prop.Id, 1))
                    player.equip_blocks[tostring(prop.TabType)] = {
                        Id = prop.Id,
                        ItemId = prop.ItemId,
                        PropertyIds = prop.PropertyIds,
                        Life = life,
                        Count = count
                    }
                end
                table.insert(player.blocks, data)
            end
        end
    end
end

function GameGunStore:getPlayerGunInfo(player, gun)
    for _, player_gun in pairs(player.guns) do
        if player_gun.Id == gun.Id then
            local data = {
                Id = player_gun.Id,
                Level = player_gun.Level
            }
            if player_gun.Status == GameGunStore.Status.LOCK
                    and player.level >= gun.UnlockLevel then
                player_gun.Status = GameGunStore.Status.NEW
            end
            data.Status = player_gun.Status
            if player_gun.Chip > 0 then
                data.Chip = player_gun.Chip
            end
            if player_gun.UpgradeTime > 0 then
                local time = player_gun.UpgradeTime - os.time()
                if time > 0 then
                    data.UpgradeTime = time
                    WaitUpgradeQueue:addUpgradeTask(player.userId, WaitUpgradeQueue.UpgradeType.UpgradeGun, player_gun.Id, time)
                else
                    player_gun.UpgradeTime = 0
                    player_gun.Level = player_gun.Level + 1
                    data.Level = player_gun.Level
                    local equip_gun = player.equip_guns[tostring(gun.TabType)]
                    if equip_gun ~= nil and equip_gun.Id == player_gun.Id then
                        equip_gun.AddDamage = GunLevelConfig:getGunLevelDamage(player_gun.Id, player_gun.Level)
                    end
                end
            end
            return data
        end
    end
    local data = {
        Id = gun.Id,
        Status = GameGunStore.Status.NEW
    }
    if gun.UnlockLevel > player.level then
        data.Status = GameGunStore.Status.LOCK
    end
    return data
end

function GameGunStore:getPlayerPropInfo(player, prop)
    local props, equip_props
    if prop.Type == PropConfig.PropType.Prop then
        props = player.props
        equip_props = player.equip_props
    else
        props = player.blocks
        equip_props = player.equip_blocks
    end
    for _, player_prop in pairs(props) do
        if player_prop.Id == prop.Id then
            local data = {
                Id = player_prop.Id,
                Level = player_prop.Level
            }
            if player_prop.Status == GameGunStore.Status.LOCK
                    and player.level >= prop.UnlockLevel then
                player_prop.Status = GameGunStore.Status.NEW
            end
            data.Status = player_prop.Status
            if player_prop.Chip > 0 then
                data.Chip = player_prop.Chip
            end
            if player_prop.UpgradeTime > 0 then
                local time = player_prop.UpgradeTime - os.time()
                if time > 0 then
                    data.UpgradeTime = time
                    WaitUpgradeQueue:addUpgradeTask(player.userId, WaitUpgradeQueue.UpgradeType.UpgradeProp, player_prop.Id, time)
                else
                    player_prop.UpgradeTime = 0
                    player_prop.Level = player_prop.Level + 1
                    data.Level = player_prop.Level
                    for _, equip_prop in pairs(equip_props) do
                        if equip_prop.Id == player_prop.Id then
                            if prop.Type == PropConfig.PropType.Prop then
                                equip_prop.AddValues = PropLevelConfig:getPropLevelValues(player_prop.Id, player_prop.Level)
                            else
                                local life, count = AttributeConfig:getBlockAttribute(PropLevelConfig:getPropLevelValues(player_prop.Id, player_prop.Level))
                                equip_prop.Life = life
                                equip_prop.Count = count
                            end
                        end
                    end
                end
            end
            return data
        end
    end
    local data = {
        Id = prop.Id,
        Status = GameGunStore.Status.NEW
    }
    if prop.UnlockLevel > player.level then
        data.Status = GameGunStore.Status.LOCK
    end
    return data
end

function GameGunStore:syncGunStoreData(player)
    local canSyncData = DbUtil:CanSavePlayerData(player, DbUtil.GAME_DATA)
            and DbUtil:CanSavePlayerData(player, DbUtil.ARMORY_DATA)
    if not canSyncData then
        return
    end
    local gun_data = {}
    for _, gun in pairs(GunConfig.Guns) do
        table.insert(gun_data, GameGunStore:getPlayerGunInfo(player, gun))
    end
    GameGunStore:sendUpdateStoreGunData(player, gun_data)
    local prop_data = {}
    for _, prop in pairs(PropConfig.Props) do
        table.insert(prop_data, GameGunStore:getPlayerPropInfo(player, prop))
    end
    GameGunStore:sendUpdateStorePropData(player, prop_data)
end

function GameGunStore:updateEquipAttr(player)
    for _, equip_gun in pairs(player.equip_guns) do
        for _, gun in pairs(player.guns) do
            if equip_gun.Id == gun.Id then
                equip_gun.AddDamage = GunLevelConfig:getGunLevelDamage(gun.Id, gun.Level)
            end
        end
    end
    for _, equip_prop in pairs(player.equip_props) do
        for _, prop in pairs(player.props) do
            if equip_prop.Id == prop.Id then
                equip_prop.AddValues = PropLevelConfig:getPropLevelValues(prop.Id, prop.Level)
            end
        end
    end
    for _, equip_block in pairs(player.equip_blocks) do
        for _, block in pairs(player.blocks) do
            if equip_block.Id == block.Id then
                local life, count = AttributeConfig:getBlockAttribute(PropLevelConfig:getPropLevelValues(block.Id, block.Level))
                equip_block.Life = life
                equip_block.Count = count
            end
        end
    end
end

function GameGunStore:onFirstShowStoreGun(player, gunId)
    for _, player_gun in pairs(player.guns) do
        if player_gun.Id == gunId then
            if player_gun.Status == GameGunStore.Status.HAS_GET
                    or player_gun.Status == GameGunStore.Status.HAS_USE then
                return
            end
            player_gun.Status = GameGunStore.Status.NOT_GET
            return
        end
    end
    local gun = {
        Id = gunId,
        Level = 1,
        Status = GameGunStore.Status.NOT_GET,
        Chip = 0,
        UpgradeTime = 0,
    }
    table.insert(player.guns, gun)
end

function GameGunStore:onUseStoreGun(player, gunId)
    local config = GunConfig:getGun(gunId)
    if not config then
        return
    end
    local data = {}
    for _, gun in pairs(player.guns) do
        if gun.Status == GameGunStore.Status.HAS_USE then
            local c_config = GunConfig:getGun(gun.Id)
            if c_config ~= nil then
                if c_config.TabType == config.TabType then
                    gun.Status = GameGunStore.Status.HAS_GET
                    table.insert(data, {
                        Id = c_config.Id,
                        Status = GameGunStore.Status.HAS_GET
                    })
                    player:onUnloadGun(config.TabType, config.ItemId)
                    player:onUnloadItem(c_config.ItemId, c_config.PropertyIds)
                end
            end
        end
    end
    for _, gun in pairs(player.guns) do
        if gun.Id == gunId then
            if gun.Status == GameGunStore.Status.HAS_GET then
                gun.Status = GameGunStore.Status.HAS_USE
                table.insert(data, {
                    Id = gun.Id,
                    Status = GameGunStore.Status.HAS_USE
                })
                player.equip_guns[tostring(config.TabType)] = {
                    Id = gun.Id,
                    ItemId = config.ItemId,
                    PropertyIds = config.PropertyIds,
                    AddDamage = GunLevelConfig:getGunLevelDamage(gun.Id, gun.Level)
                }
                player:onEquipGun(config.TabType, config.ItemId)
                player:onEquipItem(config.ItemId, config.PropertyIds)
            end
            break
        end
    end
    GameGunStore:sendUpdateStoreGunData(player, data)
end

function GameGunStore:onBuyStoreGun(player, gunId)
    local config = GunConfig:getGun(gunId)
    if not config then
        return
    end
    local gun
    for _, player_gun in pairs(player.guns) do
        if player_gun.Id == gunId then
            gun = player_gun
            break
        end
    end
    if gun == nil then
        gun = {
            Id = config.Id,
            Level = 1,
            Status = GameGunStore.Status.NOT_GET,
            Chip = 0,
            UpgradeTime = 0,
        }
        table.insert(player.guns, gun)
    end
    if gun.Status == GameGunStore.Status.HAS_GET or gun.Status == GameGunStore.Status.HAS_USE then
        return
    end
    if not GameGunStore:checkHasMoney(player, gun.Chip, config.PriceType, config.Price) then
        HostApi.sendCommonTip(player.rakssid, "gun.store.no.money.tip")
        return
    end
    if config.PriceType == Define.Money.DIAMOND then
        player:consumeDiamonds(10000 + config.Id, config.Price, Define.BuyGun .. "#" .. config.Id)
        return
    end
    if config.PriceType == Define.Money.GOLD then
        return
    end
    if config.PriceType == Define.Money.MONEY then
        player:subCurrency(config.Price)
        GameGunStore:onBuyStoreGunSuccess(player, gunId)
        return
    end
    if config.PriceType == Define.Money.CHIP then
        for _, player_gun in pairs(player.guns) do
            if player_gun.Id == gunId then
                player_gun.Chip = player_gun.Chip - config.Price
                local data = {}
                table.insert(data, {
                    Id = player_gun.Id,
                    Chip = player_gun.Chip
                })
                GameGunStore:sendUpdateStoreGunData(player, data)
                GameGunStore:onBuyStoreGunSuccess(player, gunId)
                break
            end
        end
        return
    end
end

function GameGunStore:onBuyStoreGunSuccess(player, gunId)
    for _, player_gun in pairs(player.guns) do
        if player_gun.Id == gunId then
            player_gun.Status = GameGunStore.Status.HAS_GET
            break
        end
    end
    GameGunStore:onUseStoreGun(player, gunId)
end

function GameGunStore:onUpgradeStoreGun(player, gunId)
    local config = GunConfig:getGun(gunId)
    if not config then
        return
    end
    local gun
    for _, player_gun in pairs(player.guns) do
        if player_gun.Id == gunId then
            gun = player_gun
            break
        end
    end
    if not gun then
        return
    end
    if gun.Status ~= GameGunStore.Status.HAS_GET and gun.Status ~= GameGunStore.Status.HAS_USE then
        return
    end
    if gun.Level >= config.MaxLevel then
        return
    end
    if gun.UpgradeTime > 0 then
        return
    end
    local level = GunLevelConfig:getGunLevel(gun.Id, gun.Level)
    if not level then
        return
    end
    if not GameGunStore:checkHasMoney(player, gun.Chip, level.UpgradePriceType, level.UpgradePrice) then
        HostApi.sendCommonTip(player.rakssid, "gun.store.no.money.tip")
        return
    end
    if level.UpgradePriceType == Define.Money.DIAMOND then
        player:consumeDiamonds(20000 + config.Id, level.UpgradePrice, Define.UpgradeGun .. "#" .. config.Id)
        return
    end
    if level.UpgradePriceType == Define.Money.GOLD then
        return
    end
    if level.UpgradePriceType == Define.Money.MONEY then
        player:subCurrency(level.UpgradePrice)
        GameGunStore:onUpgradeStoreGunSuccess(player, gunId)
        return
    end
    if level.UpgradePriceType == Define.Money.CHIP then
        for _, player_gun in pairs(player.guns) do
            if player_gun.Id == gunId then
                player_gun.Chip = player_gun.Chip - level.UpgradePrice
                local data = {}
                table.insert(data, {
                    Id = player_gun.Id,
                    Chip = player_gun.Chip
                })
                GameGunStore:sendUpdateStoreGunData(player, data)
                GameGunStore:onUpgradeStoreGunSuccess(player, gunId)
                break
            end
        end
        return
    end
end

function GameGunStore:onUpgradeStoreGunSuccess(player, gunId)
    for _, player_gun in pairs(player.guns) do
        if player_gun.Id == gunId then
            local level = GunLevelConfig:getGunLevel(player_gun.Id, player_gun.Level)
            if not level then
                return
            end
            if level.UpgradeTime > 0 then
                player_gun.UpgradeTime = os.time() + level.UpgradeTime
                local data = {}
                table.insert(data, {
                    Id = player_gun.Id,
                    UpgradeTime = level.UpgradeTime
                })
                GameGunStore:sendUpdateStoreGunData(player, data)
                WaitUpgradeQueue:addUpgradeTask(player.userId, WaitUpgradeQueue.UpgradeType.UpgradeGun, gunId, level.UpgradeTime)
            else
                GameGunStore:onUpgradeStoreGunFinished(player, gunId)
            end
            break
        end
    end
end

function GameGunStore:onQuickUpgradeStoreGun(player, gunId)
    local config = GunConfig:getGun(gunId)
    if not config then
        return
    end
    local gun
    for _, player_gun in pairs(player.guns) do
        if player_gun.Id == gunId then
            gun = player_gun
            break
        end
    end
    if not gun then
        return
    end
    if gun.Status ~= GameGunStore.Status.HAS_GET and gun.Status ~= GameGunStore.Status.HAS_USE then
        return
    end
    if gun.Level >= config.MaxLevel then
        return
    end
    if gun.UpgradeTime <= 0 then
        return
    end
    local level = GunLevelConfig:getGunLevel(gun.Id, gun.Level)
    if not level then
        return
    end
    if not GameGunStore:checkHasMoney(player, gun.Chip, level.QuickUpgradePriceType, level.QuickUpgradePrice) then
        HostApi.sendCommonTip(player.rakssid, "gun.store.no.money.tip")
        return
    end
    if level.QuickUpgradePriceType == Define.Money.DIAMOND then
        player:consumeDiamonds(30000 + config.Id, level.QuickUpgradePrice, Define.QuickUpgradeGun .. "#" .. config.Id)
        return
    end
    if level.QuickUpgradePriceType == Define.Money.GOLD then
        return
    end
    if level.QuickUpgradePriceType == Define.Money.MONEY then
        player:subCurrency(level.QuickUpgradePrice)
        GameGunStore:onQuickUpgradeStoreGunSuccess(player, gunId)
        return
    end
    if level.QuickUpgradePriceType == Define.Money.CHIP then
        for _, player_gun in pairs(player.guns) do
            if player_gun.Id == gunId then
                player_gun.Chip = player_gun.Chip - level.QuickUpgradePrice
                local data = {}
                table.insert(data, {
                    Id = player_gun.Id,
                    Chip = player_gun.Chip
                })
                GameGunStore:sendUpdateStoreGunData(player, data)
                GameGunStore:onQuickUpgradeStoreGunSuccess(player, gunId)
                break
            end
        end
        return
    end
end

function GameGunStore:onQuickUpgradeStoreGunSuccess(player, gunId)
    WaitUpgradeQueue:removeUpgradeTask(player.userId, WaitUpgradeQueue.UpgradeType.UpgradeGun, gunId)
    GameGunStore:onUpgradeStoreGunFinished(player, gunId)
end

function GameGunStore:onUpgradeStoreGunFinished(player, gunId)
    local config = GunConfig:getGun(gunId)
    if not config then
        return
    end
    for _, player_gun in pairs(player.guns) do
        if player_gun.Id == gunId then
            if player_gun.UpgradeTime > 0 then
                player_gun.Level = player_gun.Level + 1
                player_gun.UpgradeTime = 0
                local data = {}
                table.insert(data, {
                    Id = player_gun.Id,
                    Level = player_gun.Level,
                    UpgradeTime = 0
                })
                GameGunStore:sendUpdateStoreGunData(player, data)
            end
            local equip_gun = player.equip_guns[tostring(config.TabType)]
            if equip_gun ~= nil and equip_gun.Id == player_gun.Id then
                equip_gun.AddDamage = GunLevelConfig:getGunLevelDamage(player_gun.Id, player_gun.Level)
            end
            break
        end
    end
end

function GameGunStore:onFirstShowStoreProp(player, propId)
    local config = PropConfig:getProp(propId)
    if not config then
        return
    end
    local props
    if config.Type == PropConfig.PropType.Prop then
        props = player.props
    else
        props = player.blocks
    end
    for _, player_prop in pairs(props) do
        if player_prop.Id == propId then
            if player_prop.Status == GameGunStore.Status.HAS_GET
                    or player_prop.Status == GameGunStore.Status.HAS_USE then
                return
            end
            player_prop.Status = GameGunStore.Status.NOT_GET
            return
        end
    end
    local prop = {
        Id = propId,
        Level = 1,
        Status = GameGunStore.Status.NOT_GET,
        Chip = 0,
        UpgradeTime = 0,
    }
    table.insert(props, prop)
end

function GameGunStore:onUseStoreProp(player, propId)
    local config = PropConfig:getProp(propId)
    if not config then
        return
    end
    local data = {}
    if config.Type == PropConfig.PropType.Prop then
        if #player.equip_props >= 2 then
            HostApi.sendCommonTip(player.rakssid, "gun.store.full.prop.tip")
            return
        end
        for _, prop in pairs(player.props) do
            if prop.Id == propId then
                if prop.Status == GameGunStore.Status.HAS_GET then
                    prop.Status = GameGunStore.Status.HAS_USE
                    table.insert(data, {
                        Id = prop.Id,
                        Status = GameGunStore.Status.HAS_USE
                    })
                    local equip = false
                    for pos, equipped in pairs(player.equip_props) do
                        if equipped.Id == propId then
                            equip = true
                        end
                    end
                    if equip then
                        break
                    end
                    table.insert(player.equip_props, {
                        Id = prop.Id,
                        ItemId = config.ItemId,
                        PropertyIds = config.PropertyIds,
                        AddValues = PropLevelConfig:getPropLevelValues(prop.Id, prop.Level)
                    })
                    player:onEquipProp(config.ItemId)
                    player:onEquipItem(config.ItemId, config.PropertyIds)
                end
                break
            end
        end
    else
        for _, block in pairs(player.blocks) do
            if block.Status == GameGunStore.Status.HAS_USE then
                local c_config = PropConfig:getProp(block.Id)
                if c_config ~= nil then
                    if c_config.TabType == config.TabType then
                        block.Status = GameGunStore.Status.HAS_GET
                        table.insert(data, {
                            Id = c_config.Id,
                            Status = GameGunStore.Status.HAS_GET
                        })
                        player:onUnloadBlock(config.TabType, config.ItemId)
                        player:onUnloadItem(c_config.ItemId, c_config.PropertyIds)
                    end
                end
            end
        end
        for _, block in pairs(player.blocks) do
            if block.Id == propId then
                if block.Status == GameGunStore.Status.HAS_GET then
                    block.Status = GameGunStore.Status.HAS_USE
                    table.insert(data, {
                        Id = block.Id,
                        Status = GameGunStore.Status.HAS_USE
                    })
                    local life, count = AttributeConfig:getBlockAttribute(PropLevelConfig:getPropLevelValues(block.Id, block.Level))
                    player.equip_blocks[tostring(config.TabType)] = {
                        Id = block.Id,
                        ItemId = config.ItemId,
                        PropertyIds = config.PropertyIds,
                        Life = life,
                        Count = count
                    }
                    player:onEquipBlock(config.ItemId, count)
                    player:onEquipItem(config.ItemId, config.PropertyIds)
                end
                break
            end
        end
    end
    GameGunStore:sendUpdateStorePropData(player, data)
end

function GameGunStore:onUnloadStoreProp(player, propId)
    local config = PropConfig:getProp(propId)
    if not config then
        return
    end
    if config.Type ~= PropConfig.PropType.Prop then
        return
    end
    local data = {}
    for _, prop in pairs(player.props) do
        if prop.Id == propId then
            if prop.Status == GameGunStore.Status.HAS_USE then
                prop.Status = GameGunStore.Status.HAS_GET
                table.insert(data, {
                    Id = prop.Id,
                    Status = GameGunStore.Status.HAS_GET
                })
                for pos, equipped in pairs(player.equip_props) do
                    if equipped.Id == propId then
                        table.remove(player.equip_props, pos)
                    end
                end
                player:onUnloadProp(config.ItemId)
                player:onUnloadItem(config.ItemId, config.PropertyIds)
            end
        end
    end
    GameGunStore:sendUpdateStorePropData(player, data)
end

function GameGunStore:onBuyStoreProp(player, propId)
    local config = PropConfig:getProp(propId)
    if not config then
        return
    end
    local props
    if config.Type == PropConfig.PropType.Prop then
        props = player.props
    else
        props = player.blocks
    end
    local prop
    for _, player_prop in pairs(props) do
        if player_prop.Id == propId then
            prop = player_prop
            break
        end
    end
    if prop == nil then
        prop = {
            Id = config.Id,
            Level = 1,
            Status = GameGunStore.Status.NOT_GET,
            Chip = 0,
            UpgradeTime = 0,
        }
        table.insert(props, prop)
    end
    if prop.Status == GameGunStore.Status.HAS_GET and prop.Status == GameGunStore.Status.HAS_USE then
        return
    end
    if not GameGunStore:checkHasMoney(player, prop.Chip, config.PriceType, config.Price) then
        HostApi.sendCommonTip(player.rakssid, "gun.store.no.money.tip")
        return
    end
    if config.PriceType == Define.Money.DIAMOND then
        player:consumeDiamonds(10000 + config.Id, config.Price, Define.BuyProp .. "#" .. config.Id)
        return
    end
    if config.PriceType == Define.Money.GOLD then
        return
    end
    if config.PriceType == Define.Money.MONEY then
        player:subCurrency(config.Price)
        GameGunStore:onBuyStorePropSuccess(player, propId)
    end
    if config.PriceType == Define.Money.CHIP then
        for _, player_prop in pairs(props) do
            if player_prop.Id == propId then
                player_prop.Chip = player_prop.Chip - config.Price
                local data = {}
                table.insert(data, {
                    Id = player_prop.Id,
                    Chip = player_prop.Chip
                })
                GameGunStore:sendUpdateStorePropData(player, data)
                GameGunStore:onBuyStorePropSuccess(player, propId)
                break
            end
        end
    end
end

function GameGunStore:onBuyStorePropSuccess(player, propId)
    local config = PropConfig:getProp(propId)
    if not config then
        return
    end
    if config.Type == PropConfig.PropType.Prop then
        local data = {}
        for _, player_prop in pairs(player.props) do
            if player_prop.Id == propId then
                player_prop.Status = GameGunStore.Status.HAS_GET
                table.insert(data, {
                    Id = player_prop.Id,
                    Status = player_prop.Status
                })
                break
            end
        end
        GameGunStore:sendUpdateStorePropData(player, data)
    else
        for _, player_block in pairs(player.blocks) do
            if player_block.Id == propId then
                player_block.Status = GameGunStore.Status.HAS_GET
                break
            end
        end
        GameGunStore:onUseStoreProp(player, propId)
    end
end

function GameGunStore:onUpgradeStoreProp(player, propId)
    local config = PropConfig:getProp(propId)
    if not config then
        return
    end
    local props
    if config.Type == PropConfig.PropType.Prop then
        props = player.props
    else
        props = player.blocks
    end
    local prop
    for _, player_prop in pairs(props) do
        if player_prop.Id == propId then
            prop = player_prop
            break
        end
    end
    if not prop then
        return
    end
    if prop.Status ~= GameGunStore.Status.HAS_GET and prop.Status ~= GameGunStore.Status.HAS_USE then
        return
    end
    if prop.Level >= config.MaxLevel then
        return
    end
    if prop.UpgradeTime > 0 then
        return
    end
    local level = PropLevelConfig:getPropLevel(prop.Id, prop.Level)
    if not level then
        return
    end
    if not GameGunStore:checkHasMoney(player, prop.Chip, level.UpgradePriceType, level.UpgradePrice) then
        HostApi.sendCommonTip(player.rakssid, "gun.store.no.money.tip")
        return
    end
    if level.UpgradePriceType == Define.Money.DIAMOND then
        player:consumeDiamonds(20000 + config.Id, level.UpgradePrice, Define.UpgradeProp .. "#" .. config.Id)
        return
    end
    if level.UpgradePriceType == Define.Money.GOLD then
        return
    end
    if level.UpgradePriceType == Define.Money.MONEY then
        player:subCurrency(level.UpgradePrice)
        GameGunStore:onUpgradeStorePropSuccess(player, propId)
        return
    end
    if level.UpgradePriceType == Define.Money.CHIP then
        for _, player_prop in pairs(props) do
            if player_prop.Id == propId then
                player_prop.Chip = player_prop.Chip - level.UpgradePrice
                local data = {}
                table.insert(data, {
                    Id = player_prop.Id,
                    Chip = player_prop.Chip
                })
                GameGunStore:sendUpdateStorePropData(player, data)
                GameGunStore:onUpgradeStorePropSuccess(player, propId)
                break
            end
        end
        return
    end
end

function GameGunStore:onUpgradeStorePropSuccess(player, propId)
    local config = PropConfig:getProp(propId)
    if not config then
        return
    end
    local props
    if config.Type == PropConfig.PropType.Prop then
        props = player.props
    else
        props = player.blocks
    end
    for _, player_prop in pairs(props) do
        if player_prop.Id == propId then
            local level = PropLevelConfig:getPropLevel(player_prop.Id, player_prop.Level)
            if not level then
                return
            end
            if level.UpgradeTime > 0 then
                player_prop.UpgradeTime = os.time() + level.UpgradeTime
                local data = {}
                table.insert(data, {
                    Id = player_prop.Id,
                    UpgradeTime = level.UpgradeTime
                })
                GameGunStore:sendUpdateStorePropData(player, data)
                WaitUpgradeQueue:addUpgradeTask(player.userId, WaitUpgradeQueue.UpgradeType.UpgradeProp, propId, level.UpgradeTime)
            else
                GameGunStore:onUpgradeStorePropFinished(player, propId)
            end
            break
        end
    end
end

function GameGunStore:onQuickUpgradeStoreProp(player, propId)
    local config = PropConfig:getProp(propId)
    if not config then
        return
    end
    local props
    if config.Type == PropConfig.PropType.Prop then
        props = player.props
    else
        props = player.blocks
    end
    local prop
    for _, player_prop in pairs(props) do
        if player_prop.Id == propId then
            prop = player_prop
            break
        end
    end
    if not prop then
        return
    end
    if prop.Status ~= GameGunStore.Status.HAS_GET and prop.Status ~= GameGunStore.Status.HAS_USE then
        return
    end
    if prop.Level >= config.MaxLevel then
        return
    end
    if prop.UpgradeTime <= 0 then
        return
    end
    local level = PropLevelConfig:getPropLevel(prop.Id, prop.Level)
    if not level then
        return
    end
    if not GameGunStore:checkHasMoney(player, prop.Chip, level.QuickUpgradePriceType, level.QuickUpgradePrice) then
        HostApi.sendCommonTip(player.rakssid, "gun.store.no.money.tip")
        return
    end
    if level.QuickUpgradePriceType == Define.Money.DIAMOND then
        player:consumeDiamonds(30000 + config.Id, level.QuickUpgradePrice, Define.QuickUpgradeProp .. "#" .. config.Id)
        return
    end
    if level.QuickUpgradePriceType == Define.Money.GOLD then
        return
    end
    if level.QuickUpgradePriceType == Define.Money.MONEY then
        player:subCurrency(level.QuickUpgradePrice)
        GameGunStore:onQuickUpgradeStorePropSuccess(player, propId)
        return
    end
    if level.QuickUpgradePriceType == Define.Money.CHIP then
        for _, player_prop in pairs(props) do
            if player_prop.Id == propId then
                player_prop.Chip = player_prop.Chip - level.QuickUpgradePrice
                local data = {}
                table.insert(data, {
                    Id = player_prop.Id,
                    Chip = player_prop.Chip
                })
                GameGunStore:sendUpdateStorePropData(player, data)
                GameGunStore:onQuickUpgradeStorePropSuccess(player, propId)
                break
            end
        end
        return
    end
end

function GameGunStore:onQuickUpgradeStorePropSuccess(player, propId)
    WaitUpgradeQueue:removeUpgradeTask(player.userId, WaitUpgradeQueue.UpgradeType.UpgradeProp, propId)
    GameGunStore:onUpgradeStorePropFinished(player, propId)
end

function GameGunStore:onUpgradeStorePropFinished(player, propId)
    local config = PropConfig:getProp(propId)
    if not config then
        return
    end
    local props, equip_props
    if config.Type == PropConfig.PropType.Prop then
        props = player.props
        equip_props = player.equip_props
    else
        props = player.blocks
        equip_props = player.equip_blocks
    end
    for _, player_prop in pairs(props) do
        if player_prop.Id == propId then
            if player_prop.UpgradeTime > 0 then
                player_prop.Level = player_prop.Level + 1
                player_prop.UpgradeTime = 0
                local data = {}
                table.insert(data, {
                    Id = player_prop.Id,
                    Level = player_prop.Level,
                    UpgradeTime = 0
                })
                GameGunStore:sendUpdateStorePropData(player, data)
            end
            for _, equip_prop in pairs(equip_props) do
                if equip_prop.Id == player_prop.Id then
                    if config.Type == PropConfig.PropType.Prop then
                        equip_prop.AddValues = PropLevelConfig:getPropLevelValues(player_prop.Id, player_prop.Level)
                    else
                        local life, count = AttributeConfig:getBlockAttribute(PropLevelConfig:getPropLevelValues(player_prop.Id, player_prop.Level))
                        equip_prop.Life = life
                        equip_prop.Count = count
                    end
                    break
                end
            end
            break
        end
    end
end

function GameGunStore:checkHasMoney(player, chip, type, price)
    if type == Define.Money.DIAMOND then
        return player:getDiamond() >= price
    end
    if type == Define.Money.GOLD then
        return player:getGold() >= price
    end
    if type == Define.Money.MONEY then
        return player.money >= price
    end
    if type == Define.Money.CHIP then
        return chip >= price
    end
    return false
end

return GameGunStore