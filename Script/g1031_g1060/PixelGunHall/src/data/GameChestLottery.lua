---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Jimmy.
--- DateTime: 2019/1/3 0003 16:04
---
GameChestLottery = {}

function GameChestLottery:sendUpdateLotteryIntegral(player)
    HostApi.sendShowChestLottery(player.rakssid, false, player.chest_integral, ChestConfig:getUltimateChestIntegral())
end

function GameChestLottery:sendUpdateLotteryChestData(player, data)
    HostApi.sendUpdateLotteryChestData(player.rakssid, json.encode(data))
end

function GameChestLottery:sendChestLotteryResult(player, rewardId, hasGet)
    HostApi.sendChestLotteryResult(player.rakssid, rewardId, (hasGet or true))
end

function GameChestLottery:initChestLotteryData(player)
    for _, chest in pairs(ChestConfig.Chests) do
        local data = {}
        data.Id = chest.Id
        data.HasNum = 0
        data.GetFreeTime = 0
        data.Integral = 0
        table.insert(player.chests, data)
    end
end

function GameChestLottery:syncChestLotteryData(player)
    local data = {}
    for _, chest in pairs(player.chests) do
        local config = ChestConfig:getChestById(chest.Id)
        if config.GetFreeTime ~= -1 then
            if os.time() - chest.GetFreeTime >= config.GetFreeTime then
                chest.GetFreeTime = os.time()
                chest.HasNum = chest.HasNum + 1
            end
        end
        table.insert(data, {
            Id = chest.Id,
            HasNum = chest.HasNum
        })
    end
    GameChestLottery:sendUpdateLotteryChestData(player, data)
    GameChestLottery:sendUpdateLotteryIntegral(player)
end

function GameChestLottery:onPlayerOpenLotteryChest(player, chestId)
    local player_chest
    for _, chest in pairs(player.chests) do
        if chest.Id == chestId then
            player_chest = chest
        end
    end
    if not player_chest then
        return
    end
    if player_chest.HasNum > 0 then
        player_chest.HasNum = player_chest.HasNum - 1
        local data = {}
        table.insert(data, {
            Id = player_chest.Id,
            HasNum = player_chest.HasNum
        })
        GameChestLottery:sendUpdateLotteryChestData(player, data)
        GameChestLottery:onPlayerLottery(player, chestId)
        return
    end
    local config = ChestConfig:getChestById(chestId)
    if not config then
        return
    end
    if config.Type == ChestConfig.ChestType.ULTIMATE_CHEST then
        if player.chest_integral >= config.NeedIntegral then
            player.chest_integral = player.chest_integral - config.NeedIntegral
            GameChestLottery:sendUpdateLotteryIntegral(player)
            GameChestLottery:onPlayerLottery(player, chestId)
        end
        return
    end
    if player.yaoshi >= config.NeedKey then
        player.yaoshi = player.yaoshi - config.NeedKey
        player:syncHallInfo()
        GameChestLottery:onPlayerLottery(player, chestId)
        return
    end
    HostApi.showConsumeCoinTip(player.rakssid, config.PayTip, config.PriceType, config.Price, Define.OpenLotteryChest .. "#" .. config.Id)
end

function GameChestLottery:onPlayerConfirmPayLottery(player, chestId)
    local config = ChestConfig:getChestById(chestId)
    if not config then
        return
    end
    if config.PriceType == Define.Money.DIAMOND then
        if player:getDiamond() >= config.Price then
            player:consumeDiamonds(60000 + config.Id, config.Price, Define.OpenLotteryChest .. "#" .. config.Id)
        end
        return
    end
    if config.PriceType == Define.Money.MONEY then
        if player.money >= config.Price then
            player:subCurrency(config.Price)
            GameChestLottery:onPlayerLottery(player, chestId)
        end
        return
    end
end

function GameChestLottery:onPlayerLottery(player, chestId)
    local config = ChestConfig:getChestById(chestId)
    if not config then
        return
    end
    player.chest_integral = player.chest_integral + config.AddIntegral
    GameChestLottery:sendUpdateLotteryIntegral(player)
    local reward = config.Rewards[LotteryUtil:get(tostring(config.Id))]
    if not reward then
        return
    end
    GameChestLottery:onPlayerGetReward(player, reward, false)
end

function GameChestLottery:onPlayerGetReward(player, reward, redress)
    local hasGet
    if reward.RewardType == ChestRewardConfig.RewardType.GUN_CHIP then
        hasGet = GameChestLottery:onPlayerRewardGunChip(player, reward.RewardId, reward.Count)
    end
    if reward.RewardType == ChestRewardConfig.RewardType.GUN then
        hasGet = GameChestLottery:onPlayerRewardGun(player, reward.RewardId, reward.Count)
    end
    if reward.RewardType == ChestRewardConfig.RewardType.PROP_CHIP then
        hasGet = GameChestLottery:onPlayerRewardPropChip(player, reward.RewardId, reward.Count)
    end
    if reward.RewardType == ChestRewardConfig.RewardType.PROP then
        hasGet = GameChestLottery:onPlayerRewardProp(player, reward.RewardId, reward.Count)
    end
    if reward.RewardType == ChestRewardConfig.RewardType.MONEY then
        LuaTimer:schedule(function(userId, count)
            local c_player = PlayerManager:getPlayerByUserId(userId)
            if not c_player then
                return
            end
            c_player:addCurrency(count or 0)
        end, 2, nil, player.userId, reward.Count)
    end
    if reward.RewardType == ChestRewardConfig.RewardType.KEY then
        player.yaoshi = player.yaoshi + reward.Count
        player:syncHallInfo()
    end
    if reward.RewardType == ChestRewardConfig.RewardType.VIP then
        GameChestLottery:onPlayerRewardVip(player, reward.Time)
    end
    if not redress and not hasGet then
        GameChestLottery:sendChestLotteryResult(player, reward.Id)
        return
    end
    if not hasGet then
        GameChestLottery:sendChestLotteryResult(player, reward.Id)
    else
        local redress_reward = ChestRewardConfig:getChestRewardId(reward.RedressRewardId)
        if redress_reward then
            GameChestLottery:onPlayerGetReward(player, redress_reward, true)
        end
        GameChestLottery:sendChestLotteryResult(player, reward.RedressRewardId)
    end
end

function GameChestLottery:onPlayerRewardGunChip(player, gunId, count)
    if count == 0 then
        return
    end
    local player_gun
    for _, gun in pairs(player.guns) do
        if gun.Id == gunId then
            player_gun = gun
        end
    end
    if not player_gun then
        player_gun = {
            Id = gunId,
            Level = 1,
            Status = GameGunStore.Status.LOCK,
            Chip = 0,
            UpgradeTime = 0,
        }
        table.insert(player.guns, player_gun)
    end
    player_gun.Chip = player_gun.Chip + count
    local data = {}
    table.insert(data, {
        Id = player_gun.Id,
        Chip = player_gun.Chip,
    })
    GameGunStore:sendUpdateStoreGunData(player, data)
end

function GameChestLottery:onPlayerRewardGun(player, gunId, count)
    local player_gun
    for _, gun in pairs(player.guns) do
        if gun.Id == gunId then
            player_gun = gun
        end
    end
    if not player_gun then
        player_gun = {
            Id = gunId,
            Level = 1,
            Status = GameGunStore.Status.LOCK,
            Chip = 0,
            UpgradeTime = 0,
        }
        table.insert(player.guns, player_gun)
    end
    if player_gun.Status ~= GameGunStore.Status.HAS_GET and player_gun.Status ~= GameGunStore.Status.HAS_USE then
        player_gun.Status = GameGunStore.Status.HAS_GET
        local data = {}
        table.insert(data, {
            Id = player_gun.Id,
            Status = player_gun.Status,
        })
        GameGunStore:sendUpdateStoreGunData(player, data)
    else
        return true
    end
end

function GameChestLottery:onPlayerRewardPropChip(player, propId, count)
    if count == 0 then
        return
    end
    local config = PropConfig:getProp(propId)
    if not config then
        return
    end
    local props
    if config.Type == PropConfig.PropType.Prop then
        props = player.props
    else
        props = player.blocks
    end
    local player_prop
    for _, prop in pairs(props) do
        if prop.Id == propId then
            player_prop = prop
        end
    end
    if not player_prop then
        player_prop = {
            Id = propId,
            Level = 1,
            Status = GameGunStore.Status.LOCK,
            Chip = 0,
            UpgradeTime = 0,
        }
        table.insert(props, player_prop)
    end
    player_prop.Chip = player_prop.Chip + count
    local data = {}
    table.insert(data, {
        Id = player_prop.Id,
        Chip = player_prop.Chip,
    })
    GameGunStore:sendUpdateStorePropData(player, data)
end

function GameChestLottery:onPlayerRewardProp(player, propId, count)
    local config = PropConfig:getProp(propId)
    if not config then
        return
    end
    local props
    if config.Type == PropConfig.PropType.Prop then
        props = player.props
    else
        props = player.blocks
    end
    local player_prop
    for _, prop in pairs(props) do
        if prop.Id == propId then
            player_prop = prop
        end
    end
    if not player_prop then
        player_prop = {
            Id = propId,
            Level = 1,
            Status = GameGunStore.Status.LOCK,
            Chip = 0,
            UpgradeTime = 0,
        }
        table.insert(props, player_prop)
    end
    if player_prop.Status ~= GameGunStore.Status.HAS_GET and player_prop.Status ~= GameGunStore.Status.HAS_USE then
        player_prop.Status = GameGunStore.Status.HAS_GET
        local data = {}
        table.insert(data, {
            Id = player_prop.Id,
            Status = player_prop.Status,
        })
        GameGunStore:sendUpdateStorePropData(player, data)
    else
        return true
    end
end

function GameChestLottery:onPlayerRewardVip(player, time)
    if time == 0 then
        return
    end
    local isVip = player:isGameVip()
    if player.vip_time <= os.time() then
        player.vip_time = os.time()
    end
    player.vip_time = player.vip_time + time
    if not isVip then
        player:setShowName(player:buildShowName())
    end
end

function GameChestLottery:addPlayerLotteryChest(player, id, count)
    local data = {}
    for _, chest in pairs(player.chests) do
        if chest.Id == id then
            chest.HasNum = chest.HasNum + count
            table.insert(data, {
                Id = chest.Id,
                HasNum = chest.HasNum
            })
        end
    end
    GameChestLottery:sendUpdateLotteryChestData(player, data)
end

return GameChestLottery