---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Jimmy.
--- DateTime: 2018/12/30 0030 13:51
---
PropLevelConfig = {}
PropLevelConfig.PropLevels = {}

function PropLevelConfig:initConfig(prop_levels)
    for _, config in pairs(prop_levels) do
        local prop_level = {}
        prop_level.PropId = tonumber(config.PropId)
        prop_level.Level = tonumber(config.Level)
        prop_level.CurValues = config.CurValues
        prop_level.UpgradePriceType = tonumber(config.UpgradePriceType) or 0
        prop_level.UpgradePrice = tonumber(config.UpgradePrice) or 0
        prop_level.UpgradeTime = tonumber(config.UpgradeTime) or 0
        prop_level.QuickUpgradePriceType = tonumber(config.QuickUpgradePriceType) or 0
        prop_level.QuickUpgradePrice = tonumber(config.QuickUpgradePrice) or 0
        table.insert(self.PropLevels, prop_level)
    end
end

function PropLevelConfig:getPropLevel(propId, level)
    for _, PropLevel in pairs(self.PropLevels) do
        if PropLevel.PropId == propId and PropLevel.Level == level then
            return PropLevel
        end
    end
    return nil
end

function PropLevelConfig:getPropLevelValues(propId, level)
    for _, PropLevel in pairs(self.PropLevels) do
        if PropLevel.PropId == propId and PropLevel.Level == level then
            return PropLevel.CurValues
        end
    end
    return ""
end

return PropLevelConfig