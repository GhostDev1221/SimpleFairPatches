---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Jimmy.
--- DateTime: 2019/1/1 0001 9:44
---
WaitUpgradeQueue = {}
WaitUpgradeQueue.UpgradeType = {
    UpgradeGun = 1,
    UpgradeProp = 2,
    UpgradeArmor = 3
}
WaitUpgradeQueue.Tasks = {}

function WaitUpgradeQueue:addUpgradeTask(userId, type, id, time)
    local remark = tostring(userId) .. type .. id
    WaitUpgradeQueue.Tasks[remark] = {
        userId = userId,
        type = type,
        id = id,
        time = os.time() + time
    }
end

function WaitUpgradeQueue:removeUpgradeTask(userId, type, id)
    local remark = tostring(userId) .. type .. id
    WaitUpgradeQueue.Tasks[remark] = nil
end

function WaitUpgradeQueue:onTick()
    local time = os.time()
    local removes = {}
    for remark, task in pairs(WaitUpgradeQueue.Tasks) do
        if task.time - time <= 0 then
            WaitUpgradeQueue:onTaskFinish(task)
            table.insert(removes, remark)
        end
    end
    for _, remark in pairs(removes) do
        WaitUpgradeQueue.Tasks[remark] = nil
    end
end

function WaitUpgradeQueue:onTaskFinish(task)
    local player = PlayerManager:getPlayerByUserId(task.userId)
    if player == nil then
        return
    end
    if task.type == WaitUpgradeQueue.UpgradeType.UpgradeGun then
        GameGunStore:onUpgradeStoreGunFinished(player, task.id)
        return
    end
    if task.type == WaitUpgradeQueue.UpgradeType.UpgradeProp then
        GameGunStore:onUpgradeStorePropFinished(player, task.id)
        return
    end

    if task.type == WaitUpgradeQueue.UpgradeType.UpgradeArmor then
        GameArmor:onUpgradeArmorFinished(player, task.id)
        return
    end
end

return WaitUpgradeQueue