---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Jimmy.
--- DateTime: 2018/12/4 0004 15:36
---
require "base.exp.ExpRule"

UserExpManager = {}
UserExpManager.UserExpCache = {}
UserExpManager.WaitSaveExpCache = {}
UserExpManager.QuitSaveExpCache = {}

function UserExpManager:getUserExpCache(userId)
    if not ExpRule:isEnable() then
        return
    end
    WebService:GetBlockymodsUserExp(userId)
end

function UserExpManager:addExpCache(userId, curLv, curExp, hasGet)
    if not ExpRule:isEnable() then
        return
    end
    self.UserExpCache[tostring(userId)] = {
        curLv = curLv,
        curExp = curExp,
        hasGet = hasGet,
        addExp = 0,
        toLv = curLv,
        toExp = curExp,
        time = os.time(),
        isAdd = false
    }
    local status = ExpRule.Status.UNDONE
    if ExpRule:isExpMaxToday(hasGet) then
        status = ExpRule.Status.DAY_FULL
    end
    local upExp = ExpRule:getAverageUpExp(curLv, curLv)
    HostApi.sendAppExpResult(userId, curLv, curLv, 0, curExp, curExp, upExp, status)
end

function UserExpManager:removeExpCache(userId)
    if not ExpRule:isEnable() then
        return
    end
    local expInfo = self.UserExpCache[tostring(userId)]
    if expInfo ~= nil and not expInfo.isAdd then
        local cache = self.QuitSaveExpCache[tostring(userId)]
        if cache ~= nil then
            local data = {}
            table.insert(data, {
                userId = cache.userId,
                experienceGet = cache.addExp,
                gameId = BaseMain:getGameType()
            })
            WebService:SaveBlockymodsUsersExp(data)
        end
    end
    self.QuitSaveExpCache[tostring(userId)] = nil
    self.UserExpCache[tostring(userId)] = nil
end

function UserExpManager:addUserExp(userId, win, camps, global)
    if not ExpRule:isEnable() then
        return
    end
    local expInfo = self.UserExpCache[tostring(userId)]
    if expInfo == nil then
        return
    end
    if expInfo.curLv >= ExpRule.MaxLv then
        return
    end
    camps = camps or RewardManager:getStartPlayerCount()
    local status = ExpRule.Status.UNDONE
    local addExp = ExpRule:getAddExp(expInfo.time, win, camps)
    addExp, status = ExpRule:checkTodayExpFull(expInfo.hasGet, addExp)
    if addExp <= 0 then
        return
    end
    if not global then
        expInfo.hasGet = expInfo.hasGet + addExp
        expInfo.addExp = expInfo.addExp + addExp
        expInfo.time = os.time()
        expInfo.isAdd = true
        table.insert(self.WaitSaveExpCache, {
            userId = tonumber(tostring(userId)),
            addExp = addExp
        })
    else
        expInfo.addExp = addExp
        self.QuitSaveExpCache[tostring(userId)] = {
            userId = tonumber(tostring(userId)),
            addExp = addExp
        }
    end
    expInfo.toLv, expInfo.toExp = ExpRule:checkLvUp(expInfo.curLv, expInfo.curExp, expInfo.addExp)
    UserExpManager:sendExpResult(userId, status)
end

function UserExpManager:sendExpResult(userId, status)
    if not ExpRule:isEnable() then
        return
    end
    local expInfo = self.UserExpCache[tostring(userId)]
    if expInfo == nil then
        return
    end
    if expInfo.addExp > 0 then
        local upExp = ExpRule:getAverageUpExp(expInfo.curLv, expInfo.toLv)
        HostApi.sendAppExpResult(userId, expInfo.curLv, expInfo.toLv, expInfo.addExp, expInfo.curExp, expInfo.toExp, upExp, status)
    end
end

function UserExpManager:tryCalculationExp()
    if not ExpRule:isEnable() then
        return
    end
    local curTime = os.time()
    for userId, cache in pairs(self.UserExpCache) do
        if (curTime - cache.time) % 60 == 0 then
            UserExpManager:addUserExp(userId, false, 0, true)
        end
    end
end

function UserExpManager:trySaveExpResult()
    if not ExpRule:isEnable() then
        return
    end
    if #self.WaitSaveExpCache == 0 then
        return
    end
    local data = {}
    for _, cache in pairs(self.WaitSaveExpCache) do
        table.insert(data, {
            userId = cache.userId,
            experienceGet = cache.addExp,
            gameId = BaseMain:getGameType()
        })
    end
    self.WaitSaveExpCache = {}
    WebService:SaveBlockymodsUsersExp(data)
end

return UserExpManager