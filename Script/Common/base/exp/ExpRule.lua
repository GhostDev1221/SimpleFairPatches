---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Jimmy.
--- DateTime: 2018/12/4 0004 16:00
---
ExpRule = {}
ExpRule.Enable = true
ExpRule.MaxLv = 0
ExpRule.DayMaxExp = 1000
ExpRule.ExpCoefficient = 1
ExpRule.UpgradeExpTable = {}
ExpRule.ExpCorrectTable = {}
ExpRule.ExpTimeTable = {}
ExpRule.ExpCampsAddTable = {}

ExpRule.Status = {
    UNDONE = 0,
    DONE = 1,
    DAY_FULL = 2
}

function ExpRule:initRole(data)
    self.Enable = data.needSettle
    if self:isEnable() then
        self.DayMaxExp = data.maxExpPerDay
        self.UpgradeExpTable = data.upgradeRule
        self.ExpCoefficient = data.gameCoefficient / 100
        for _, _ in pairs(self.UpgradeExpTable) do
            self.MaxLv = self.MaxLv + 1
        end
        table.insert(self.ExpCorrectTable, { 0, 1 })
        local min = 1
        for exp, per in pairs(data.recessionRule) do
            local x = (100 - per) / 100
            if min >= x then
                min = x
            end
            table.insert(self.ExpCorrectTable, { tonumber(exp), x })
        end
        table.insert(self.ExpCorrectTable, { 10000000, min })
        table.sort(self.ExpCorrectTable, function (c1, c2)
            return c1[1] < c2[1]
        end)
        for minute, exp in pairs(data.timeExpRule) do
            table.insert(self.ExpTimeTable, exp)
        end
        table.sort(self.ExpTimeTable, function (exp1, exp2)
            return exp1 < exp2
        end)
        for camp, per in pairs(data.campBonusRule) do
            table.insert(self.ExpCampsAddTable, per / 100)
        end
        table.sort(self.ExpCampsAddTable, function (per1, per2)
            return per1 < per2
        end)
    end
end

function ExpRule:disable()
    self.Enable = false
end

function ExpRule:isEnable()
    return self.Enable
end

function ExpRule:isExpMaxToday(hasGet)
    return hasGet >= self.DayMaxExp
end

function ExpRule:getAddExp(time, win, camps)
    if #self.ExpTimeTable == 0 then
        return 0
    end
    local minutes = math.min(#self.ExpTimeTable, math.max(1, math.floor((os.time() - time) / 60)))
    local addExp = self.ExpTimeTable[minutes]
    if win and #self.ExpCampsAddTable ~= 0 then
        camps = math.min(#self.ExpCampsAddTable, math.max(1, camps))
        addExp = addExp + addExp * self.ExpCampsAddTable[camps]
    end
    addExp = addExp * self.ExpCoefficient
    return addExp
end

function ExpRule:correctAddExp(hasGet, addExp)
    local result = 0
    while addExp > 0 do
        local curCorrect
        local nextCorrect
        for index = 1, #self.ExpCorrectTable - 1 do
            curCorrect = self.ExpCorrectTable[index]
            nextCorrect = self.ExpCorrectTable[index + 1]
            if hasGet >= curCorrect[1] and hasGet < nextCorrect[1] then
                break
            end
        end
        if curCorrect == nil or nextCorrect == nil then
            break
        end
        local max = math.min(nextCorrect[1] - hasGet, addExp)
        local exp = max * curCorrect[2]
        addExp = addExp - max
        hasGet = hasGet + exp
        result = result + exp
    end
    return math.ceil(result)
end

function ExpRule:checkTodayExpFull(hasGet, addExp)
    addExp = self:correctAddExp(hasGet, addExp)
    if hasGet + addExp >= self.DayMaxExp then
        return self.DayMaxExp - hasGet, self.Status.DAY_FULL
    else
        return addExp, self.Status.DONE
    end
end

function ExpRule:checkLvUp(curLv, curExp, addExp)
    local upExp = self.UpgradeExpTable[tostring(curLv)]
    if upExp == nil then
        return curLv, curExp
    end
    local toLv, toExp = curLv, curExp
    while curExp + addExp >= upExp do
        toLv = toLv + 1
        addExp = addExp + curExp - upExp
        curExp = 0
        upExp = self.UpgradeExpTable[tostring(toLv)]
        if upExp == nil then
            toLv = toLv - 1
            addExp = 0
            break
        end
    end
    toExp = addExp
    return toLv, toExp
end

function ExpRule:getAverageUpExp(curLv, toLv)
    local totalExp = 0
    for lv = curLv, toLv do
        local upExp = self.UpgradeExpTable[tostring(lv)]
        if upExp ~= nil then
            totalExp = totalExp + upExp
        end
    end
    return math.floor(totalExp / (toLv - curLv + 1))
end

return ExpRule