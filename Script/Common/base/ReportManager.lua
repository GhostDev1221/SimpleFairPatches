---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Jimmy.
--- DateTime: 2019/2/14 0008 14:15
---
ReportManager = {}
ReportManager.RankType = { Inc = 0, Max = 1 }
ReportManager.GameRankType = ReportManager.RankType.Inc
ReportManager.GameType = "g1001"
ReportManager.WaitReportCache = {}
ReportManager.IsCloseServer = false

function ReportManager:setGameType(GameType)
    self.GameType = GameType
end

function ReportManager:setRankType(RankType)
    self.GameRankType = RankType
end

function ReportManager:closeServer()
    if self.IsCloseServer then
        return
    end
    local players = PlayerManager:getPlayers()
    for _, player in pairs(players) do
        ReportManager:onPlayerLogout(player)
    end
    self.IsCloseServer = true
end

function ReportManager:onPlayerLogout(player)
    ReportManager:reportUserTime(player.userId, os.time() - player.inGameTime)
    if player.appIntegral > 0 then
        ReportManager:reportUserIntegral(player.userId, player.appIntegral)
    end
    player.appIntegral = 0
end

function ReportManager:getUserReportCache(userId)
    userId = tonumber(tostring(userId))
    for _, cache in pairs(self.WaitReportCache) do
        if cache.userId == userId then
            return cache
        end
    end
    local cache = {
        userId = userId,
        gameId = self.GameType,
        kill = 0,
        rank = 0,
        meanTime = 0,
        integral = 0,
        type = 0
    }
    table.insert(self.WaitReportCache, cache)
    return cache
end

function ReportManager:reportUserData(userId, kills, rank, isCount)
    kills = kills or 0
    rank = rank or 0
    isCount = isCount or 0
    if kills > 0 then
        ReportManager:reportUserKill(userId, kills)
    end
    if rank > 0 then
        ReportManager:reportUserRank(userId, rank)
    end
    if isCount > 0 then
        ReportManager:reportUserCount(userId)
    end
end

function ReportManager:reportUserKill(userId, kill)
    if self.IsCloseServer then
        return
    end
    local cache = ReportManager:getUserReportCache(userId)
    cache.kill = cache.kill + (kill or 0)
end

function ReportManager:reportUserTime(userId, time)
    if self.IsCloseServer then
        return
    end
    local cache = ReportManager:getUserReportCache(userId)
    cache.meanTime = cache.meanTime + (time or 0)
end

function ReportManager:reportUserRank(userId, rank)
    if self.IsCloseServer then
        return
    end
    local cache = ReportManager:getUserReportCache(userId)
    cache.rank = rank or 0
end

function ReportManager:reportUserCount(userId)
    if self.IsCloseServer then
        return
    end
    local cache = ReportManager:getUserReportCache(userId)
    cache.isCount = 1
end

function ReportManager:reportUserIntegral(userId, integral)
    if self.IsCloseServer then
        return
    end
    local cache = ReportManager:getUserReportCache(userId)
    cache.integral = cache.integral + (integral or 0)
    cache.type = self.GameRankType
end

function ReportManager:tryReportGameData()
    if #self.WaitReportCache == 0 then
        ReportManager:tryCloseServer()
        return
    end
    WebResponse:registerCallBack(function(data)
        ReportManager:tryCloseServer()
    end, WebService:ReportBlockymodsList(self.WaitReportCache))
    self.WaitReportCache = {}
end

function ReportManager:tryCloseServer()
    if self.IsCloseServer then
        HostApi.stopServer()
    end
end

return ReportManager