---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Jimmy.
--- DateTime: 2019/1/29 0029 11:48
---
EngineWorld = {}
EngineWorld.world = nil

function EngineWorld:setWorld(world)
    self.world = world
end

function EngineWorld:getWorld()
    return self.world
end

function EngineWorld:stopWorldTime(time)
    self.world:setTimeStopped(true)
    self.world:setWorldTime((time or 6000))
end

function EngineWorld:resetMap()
    self.world:resetMap()
end

function EngineWorld:setBlockToAir(blockPos)
    self.world:setBlockToAir(blockPos)
end

function EngineWorld:setBlock(blockPos, id, meta, flag, immediate)
    if immediate == nil then
        immediate = true
    end
    self.world:setBlock(blockPos, id, (meta or 0), (flag or 0), immediate)
end

function EngineWorld:getBlockId(blockPos)
    return self.world:getBlockId(blockPos)
end

function EngineWorld:getEntity(entityId)
    return self.world:getEntity(entityId)
end

function EngineWorld:removeEntity(entityId)
    self.world:removeEntity(entityId)
end

function EngineWorld:addEntityItem(itemId, count, meta, life, pos, motion, isCombine, isEverLife)
    motion = (motion or VectorUtil.ZEOR)
    isCombine = (isCombine or false)
    isEverLife = (isEverLife or false)
    return self.world:spawnItemInWorld(itemId, count, meta, life, pos, motion, isCombine, isEverLife)
end

function EngineWorld:addRankNpc(position, yaw, name)
    return self.world:addRankNpc(position, yaw, name or "")
end

function EngineWorld:addMerchantNpc(position, yaw, name)
    return self.world:addMerchant(position, yaw, name or "")
end

function EngineWorld:addVehicleNpc(position, type, yaw)
    return self.world:addVehicle(position, type, yaw)
end

function EngineWorld:addCreatureNpc(position, id, yaw, actor, name, userId)
    if userId ~= nil then
        return self.world:addCreatureWithPlayer(position, userId, id, yaw, actor, name or "")
    else
        if name ~= nil then
            return self.world:addCreatureWithName(position, id, yaw, actor, name)
        else
            return self.world:addCreature(position, id, yaw, actor)
        end
    end
end

function EngineWorld:addActorNpc(position, yaw, actor, name, skill, effect, isCanObstruct, isCollided)
    local data = {}
    data.ActorName = actor or ""
    data.HeadName = name or ""
    data.SkillName = skill or ""
    data.EffectName = effect or ""
    if isCanObstruct == nil then
        data.IsCanObstruct = true
    else
        data.IsCanObstruct = isCanObstruct
    end
    if isCollided == nil then
        data.IsCollided = true
    else
        data.IsCollided = isCollided
    end
    return self.world:addActorNpcWithJsonResult(position, yaw, json.encode(data))
end

function EngineWorld:addSessionNpc(position, yaw, type, name, actor, body, bodyId, content, isPerson, isCanObstruct)
    name = (name or "")
    actor = (actor or "")
    body = (body or "body")
    bodyId = (bodyId or "")
    content = (content or "")
    isPerson = (isPerson or false)
    isCanObstruct = (isCanObstruct or false)
    return self.world:addSessionNpc(position, yaw, type, name, actor, body, bodyId, content, isPerson, isCanObstruct)
end

function EngineWorld:addSimpleEffect(name, position, yaw, duration, targetId, scale)
    duration = (duration or -1)
    targetId = (targetId or 0)
    scale = (scale or 1)
    self.world:addSimpleEffect(name, position, yaw, duration, targetId, scale)
end

function EngineWorld:changePlayerActor(player, actor, bodyId)
    if player.entityPlayerMP == nil then
        return
    end
    self.world:changePlayerActor(player.entityPlayerMP, actor, bodyId or "")
end

function EngineWorld:restorePlayerActor(player)
    if player.entityPlayerMP == nil then
        return
    end
    self.world:restorePlayerActor(player.entityPlayerMP)
end

function EngineWorld:addGoodsGroupToShop(type, icon, name)
    self.world:addGoodsGroupToShop(type, icon or "", name or "")
end

function EngineWorld:addGoodsToShop(type, goods)
    self.world:addGoodsToShop(type, goods)
end

return EngineWorld