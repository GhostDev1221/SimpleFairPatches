---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by work.
--- DateTime: 2018/7/4 18:19
---
require "data.GameGetPublicResource"
require "config.PersonResourceConfig"
GamePublicResource = class()
local distance = 0
function GamePublicResource:ctor(resource)
    self.resource = resource
    self.output = resource.output
    self.resSaveMax = resource.resSaveMax
    self.cdTime = 0
    self.stock = 0
    self.isInit = false
    self.receiveNpc = nil
    self.ReceivePlayers = {}  --标记 在领取范围内的玩家
    self.PlayersDistance = {}
    distance = GameConfig.CollisionDistance
end

function GamePublicResource:onCreate()
    self.receiveNpc = GameGetPublicResource.new(self, self.resource.initPos, self.resource.yaw, self.resource.recNpcActor, self.resource.recNpcName)
    self:syncStock()
    self.isInit = true
end
-- 检测  资源和玩家直接按的碰撞
function GamePublicResource:CheckCollision()
    if PlayerManager:isPlayerEmpty() then
        return
    end
    local pos = self.resource.initPos
    local players = PlayerManager:getPlayers()
    for _, player in pairs(players) do
        local id = player:getEntityId()
        local playerPos = player.position
        if playerPos.x or playerPos.y or playerPos.z then
            if math.abs(playerPos.y - pos.y) <= 2 then
                local curDistance = math.abs(playerPos.x - pos.x) ^ 2 + math.abs(playerPos.z - pos.z) ^ 2
                if curDistance <= distance ^ 2 and self.ReceivePlayers[id] == nil then
                    self.ReceivePlayers[id] = player
                    self:getResource(player)
                elseif curDistance > distance ^ 2 and self.ReceivePlayers[id] then
                    self.ReceivePlayers[id] = nil
                end
            end
        end
    end
end

function GamePublicResource:onTick(tick)
    if self.isInit then
        self:outputResource(tick)
        self:CheckCollision()
        return
    end

    if self.resource.time == 0 or tick >= self.resource.time then
        self:onCreate()
        if self.resource.time ~= 0 then
            MsgSender.sendCenterTips(4, Messages:publicResourceHint())
        end
    end
end

--资源产出
function GamePublicResource:outputResource(tick)
    --if self.stock == self.resSaveMax then
    --    return
    --end
    if tick % self.resource.interval == 0 then
        if PlayerManager:isPlayerExists() then
            local speed, ceil = PersonResourceConfig:getSpeedAndCeiling(PlayerManager:getPlayerCount())
            self.stock = math.min(self.stock + self.output * speed, self.resSaveMax * ceil)
            self:syncStock()
        end
    end
end

--增加资源产出及存储上限
function GamePublicResource:promoteResource(addOutput, addMaxStore)
    self.output = self.output + addOutput
    self.resSaveMax = self.resSaveMax + addMaxStore
end

function GamePublicResource:reduceResource(subOutput, subMaxStore)
    self.output = self.output - subOutput
    self.resSaveMax = self.resSaveMax - subMaxStore
end

--领取资源
function GamePublicResource:getResource(player)
    if self.stock == 0 then
        return
    end
    if player ~= nil then
        --玩家按可领取比例进行领取资源
        local stock = self.stock
        self.stock = self.stock - stock
        --玩家添加资源
        player:addCurrency(stock)
        self:syncStock()
        player:setResourceRecord(tostring(self.resource.id))
    end
end

function GamePublicResource:syncStock()
    EngineWorld:getWorld():updateActorNpcContent(self.receiveNpc.entityId, (self.resource.color or "") .. "$" .. self.stock)
end

return GamePublicResource