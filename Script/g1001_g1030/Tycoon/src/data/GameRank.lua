---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by work.
--- DateTime: 2018/7/11 15:59
---
require "base.util.DateUtil"
require "base.util.StringUtil"
require "base.util.VectorUtil"
require "base.cache.UserInfoCache"
require "config.RankConfig"

local utils = require "utils"

local GameRank = {}

function GameRank:init()
    self._rank_data = {}
    self._rank_npc = {}
    self._rank_record = {}

    HostApi.ZExpireat(utils.week_rank_id(), tostring(DateUtil.getWeekLastTime()))
    HostApi.ZExpireat(utils.day_rank_id(), tostring(DateUtil.getDayLastTime()))

    for _, site_rank in ipairs(RankConfig.ranks) do
        -- create npc
        do
            self._rank_npc[1] = EngineWorld:addRankNpc(
                    site_rank.pos,
                    site_rank.yaw,
                    site_rank.name
            )
        end
    end
end

----------------------------------------------
-- rank
--请求指定范围内的排行
function GameRank:request_rank()
    local keys = {}
    for _, rank in ipairs(RankConfig.ranks) do
        self._rank_record[rank.id] = 0
        table.insert(keys, utils.week_rank_id(rank.id))
        table.insert(keys, utils.day_rank_id(rank.id))
    end
    for _, key in ipairs(keys) do
        HostApi.ZRange(key, 0, 9)
    end
end

--接收请求的排行信息
function GameRank:receive_rank(key, data)
    self._rank_data[key] = {}

    local userIds = {}
    local ranks = StringUtil.split(data, "#")
    for i, data in pairs(ranks) do
        local item = StringUtil.split(data, ":")
        local rank = {
            rank = i,
            userId = tonumber(item[1]),
            score = tonumber(item[2]),
            vip = 0,
            name = "anonymous_" .. item[1],
        }
        table.insert(self._rank_data[key], rank)
        table.insert(userIds, tonumber(item[1]))
    end
    UserInfoCache:GetCacheByUserIds(userIds, function(key)
        for _, rank in ipairs(self._rank_data[key]) do
            local info = UserInfoCache:GetCache(rank.userId)
            if info then
                rank.vip = info.vip
                rank.name = info.name
            end
        end

        local id = utils:get_id_from_key(key)

        if self._rank_record[id] == nil then
            return
        end
        self._rank_record[id] = self._rank_record[id] + 1
        if self._rank_record[id] % 2 == 0 then
            local players = PlayerManager:getPlayers()
            for _, player in pairs(players) do
                player:sync_rank()
            end
        end
    end, key, key)

end

function GameRank:fetch_rank(key)
    return self._rank_data[key]
end

function GameRank:fetch_rank_npc(id)
    return assert(self._rank_npc[id], string.format("id is not exist: %s", tostring(id)))
end

return GameRank