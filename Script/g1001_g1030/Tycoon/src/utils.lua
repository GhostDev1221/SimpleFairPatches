---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by work.
--- DateTime: 2018/7/11 18:23
---

require "base.util.tinyyaml"
require "base.util.DateUtil"
require "base.util.StringUtil"

local utils = {}

function utils.week_rank_id(id)
    id = 1
    return string.format("%s.%s.%s", GameMatch.RANK_WEEK_FLAG, id, DateUtil.getYearWeek())
end

function utils.day_rank_id(id)
    id = 1
    return string.format("%s.%s.%s", GameMatch.RANK_DAY_FLAG, id, DateUtil.getYearDay())
end

function utils:get_id_from_key(key)
    local keys = StringUtil.split(key, ".")
    if keys and #keys >= 3 then
        return keys[3]
    end
    return "1"
end

function utils.print_table(root)
    assert(type(root) == "table")
    local cache = {  [root] = "." }
    local ret = ""

    local function _new_line(level)
        local ret = ""
        ret = ret.."\n"
        for i = 1, level do
            ret = ret.."\t"
        end
        return ret
    end

    local function _format(value)
        if (type(value) == "string") then
            return "\""..value.."\""
        else
            return tostring(value)
        end
    end

    local function _enter_level(t, level, name)
        local ret = ""
        local _keycache = {}
        for k, v in ipairs(t) do
            ret = ret.._new_line(level + 1)
            if (cache[v]) then
                ret = ret.."["..tostring(k).."]".." = "..cache[v]..","
            elseif (type(v) == "table") then
                local newname = name.."."..tostring(k)
                cache[v] = newname
                ret = ret.."["..tostring(k).."]".." = ".."{"
                ret = ret.._enter_level(v, level + 1, newname)
                ret = ret.._new_line(level + 1)
                ret = ret.."},"

            else
                if (type(v) == "string") then
                    ret = ret.."["..tostring(k).."]".." = ".."\""..v.."\""..","
                else
                    ret = ret.."["..tostring(k).."]".." = "..tostring(v)..","
                end
            end
            _keycache[k] = true
        end

        for k, v in pairs(t) do
            if (not _keycache[k]) then
                ret = ret.._new_line(level + 1)
                if (cache[v]) then
                    ret = ret.."[".._format(k).."]".." = "..cache[v]..","
                elseif (type(v) == "table") then
                    local newname = name.."."..tostring(k)
                    cache[v] = newname
                    ret = ret.."[".._format(k).."]".." = ".."{"
                    ret = ret.._enter_level(v, level + 1, newname)
                    ret = ret.._new_line(level + 1)
                    ret = ret.."},"
                else
                    if (type(v) == "string") then
                        ret = ret.."[".._format(k).."]".." = ".."\""..v.."\""..","
                    else
                        ret = ret.."[".._format(k).."]".." = "..tostring(v)..","
                    end
                end
            end
        end
        return ret
    end

    ret = ret .. "{"
    ret = ret .. _enter_level(root, 0, "")
    ret = ret .. "\n}\n"
    print(ret)
end


return utils