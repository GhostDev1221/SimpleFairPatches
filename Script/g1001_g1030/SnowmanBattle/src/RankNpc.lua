---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by work.
require "config.GameConfig"
require "base.util.class"
require "base.util.VectorUtil"
require "base.util.DateUtil"
require "base.cache.UserInfoCache"

RankNpc = {}
RankNpc.TYPE_WEEK = 1
RankNpc.TYPE_DAY = 2

function RankNpc:init(config)
    self.key = "WIN"
    self.name = config.name
    self.title = config.title
    self.rank_npc = {}
    for i, pos in pairs(config.poss) do
        self.rank_npc[i] = EngineWorld:addRankNpc(
                VectorUtil.newVector3(unpack(pos)),
                pos[4],
                self.name
        )
    end
    self.RankData = {}
    self.RankData.week = {}
    self.RankData.day = {}
    self.sendTick = 0
    self.hasWeek = false
    self.hasDay = false
end

function RankNpc:setZExpireat()
    HostApi.ZExpireat(self:getWeekKey(), tostring(DateUtil.getWeekLastTime()))
end

function RankNpc:getPlayerRankData(player)
    local weekKey = self:getWeekKey()
    local dayKey = self:getDayKey()
    local uid = tostring(player.userId)
    HostApi.ZScore(weekKey, uid)
    HostApi.ZScore(dayKey, uid)
end

function RankNpc:sendRankToPlayers()
    self.sendTick = self.sendTick + 1
    if self.sendTick % 2 ~= 0 then
        return
    end
    local players = PlayerManager:getPlayers()
    for i, v in pairs(players) do
        self:getPlayerRankData(v)
    end
end

function RankNpc:savePlayerRankScore(player, deathTeam)
    local weekKey = self:getWeekKey()
    local dayKey = self:getDayKey()
    local uid = tostring(player.userId)

    local p = 0
    if deathTeam ~= nil then
        if player.dynamicAttr.team ~= deathTeam then
            p = 10
        end
    end

    HostApi.ZIncrBy(weekKey, uid, p)
    HostApi.ZIncrBy(dayKey, uid, p)
end

function RankNpc:updateRank()
    local weekKey = self:getWeekKey()
    local dayKey = self:getDayKey()
    HostApi.ZRange(weekKey, 0, 9)
    HostApi.ZRange(dayKey, 0, 9)
end

function RankNpc:rebuildRank(type)
    local items = {}
    local key = ""
    if type == RankNpc.TYPE_WEEK then
        items = self.RankData.week
        key = self:getWeekKey()
    end
    if type == RankNpc.TYPE_DAY then
        items = self.RankData.day
        key = self:getDayKey()
    end
    local userIds = {}
    for i, v in pairs(items) do
        userIds[i] = v.userId
    end
    UserInfoCache:GetCacheByUserIds(userIds, function(type, items)
        for i, v in pairs(items) do
            local info = UserInfoCache:GetCache(v.userId)
            if info ~= nil then
                v.vip = info.vip
                v.name = info.name
            end
        end
        if type == RankNpc.TYPE_WEEK then
            self.RankData.week = items
            self.hasWeek = true
        end
        if type == RankNpc.TYPE_DAY then
            self.RankData.day = items
            self.hasDay = true
        end
        self:sendRankToPlayers()
    end, key, type, items)
end

function RankNpc:getWeekKey()
    return Match.gameType .. "." .. self.key .. ".week." .. DateUtil.getYearWeek()
end

function RankNpc:getDayKey()
    return Match.gameType .. "." .. self.key--  .. ".day." .. DateUtil.getYearDay()
end

function RankNpc:addWeekRank(rank)
    self.RankData.week[#self.RankData.week + 1] = rank
end

function RankNpc:addDayRank(rank)
    self.RankData.day[#self.RankData.day + 1] = rank
end

function RankNpc:buildBaseData()
    local data = {}
    data.title = self.title
    data.subType = self.id
    data.ranks = self.RankData
    return data
end

function RankNpc:sendRankData(player)
    if self.hasDay and self.hasWeek then
        local data = self:buildBaseData()
        for i, npc in pairs(self.rank_npc) do
            RankManager:sendPlayerRank(player.rakssid, self.key, data, npc)
        end
    end
end

return RankNpc